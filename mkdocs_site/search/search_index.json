{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Rive Tester Documentation","text":"<p>Interactive Rive File Parser &amp; Debugging Tool</p> <p>A comprehensive web-based tool for parsing, inspecting, and debugging Rive animation files. Load <code>.riv</code> files, explore their structure, test animations with dynamic controls, and analyze state machines and ViewModel properties.</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":"<ul> <li> <p> Launch Application</p> <p>Try the application immediately without any setup</p> <p> Launch App</p> </li> <li> <p> Local Development</p> <p>Set up the development environment on your machine</p> <p> Installation Guide</p> </li> <li> <p> User Guide</p> <p>Learn how to use all the features and panels</p> <p> Read Guide</p> </li> </ul>"},{"location":"index.html#key-features","title":"Key Features","text":""},{"location":"index.html#interactive-playground","title":"Interactive Playground","text":"<p>Load local <code>.riv</code> files with real-time animation playback and professional IDE-like interface with dockable panels.</p>"},{"location":"index.html#deep-inspection","title":"Deep Inspection","text":"<p>Analyze artboards, state machines, ViewModels, and embedded assets with interactive tree views.</p>"},{"location":"index.html#runtime-controls","title":"Runtime Controls","text":"<p>Auto-generated UI controls for ViewModel properties, state machine inputs, and animation playback.</p>"},{"location":"index.html#asset-manager","title":"Asset Manager","text":"<p>View, inspect, and replace embedded assets (images, fonts) with local files or URLs in real-time.</p>"},{"location":"index.html#debugging-tools","title":"Debugging Tools","text":"<p>Global runtime access, modular logging system, and comprehensive error handling.</p>"},{"location":"index.html#modern-ui","title":"Modern UI","text":"<p>Dark theme, responsive design, and modular CSS architecture for professional workflow.</p>"},{"location":"index.html#documentation-sections","title":"Documentation Sections","text":""},{"location":"index.html#getting-started","title":"Getting Started","text":"<ul> <li>Quick Start - Get up and running in minutes</li> <li>Installation - Set up your development environment</li> </ul>"},{"location":"index.html#user-guide","title":"User Guide","text":"<ul> <li>User Guide - Complete user guide and interface overview</li> <li>Asset Manager - Managing embedded assets</li> </ul>"},{"location":"index.html#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Debugging - Debug tools and techniques</li> <li>Runtime Controls - Advanced control features</li> </ul>"},{"location":"index.html#development","title":"Development","text":"<ul> <li>Versioning - Semantic versioning system</li> </ul>"},{"location":"index.html#deployment","title":"Deployment","text":"<ul> <li>GitHub Pages - Deploy to GitHub Pages</li> <li>Deployment Guide - General deployment information</li> </ul>"},{"location":"index.html#technical-stack","title":"Technical Stack","text":"Component Description @rive-app/webgl2 Official Rive WebGL2 runtime Golden Layout Professional dockable panel system JSONEditor Interactive JSON tree viewer Modular CSS Maintainable styling architecture"},{"location":"index.html#quick-links","title":"Quick Links","text":"<ul> <li> Launch Application</li> <li> GitHub Repository</li> <li> Rive.app</li> <li> Rive Community</li> </ul>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Rive Team - For the Rive runtime and tools</li> <li>JSONEditor - For the JSON viewing component</li> <li>Golden Layout - For the layout system</li> </ul> <p>Built with  by IVG Design for the Rive community</p>"},{"location":"advanced/debugger-fixes.html","title":"\ud83d\udd27 Debugger System Fixes &amp; Improvements","text":"<p>Comprehensive documentation of all debugger control system fixes and enhancements</p> <p>This document details all the fixes and improvements made to the Rive Tester's debug control system, addressing functionality issues and adding new features for better debugging experience.</p>"},{"location":"advanced/debugger-fixes.html#overview","title":"\ud83d\udccb Overview","text":"<p>The debug control system underwent a complete overhaul to fix non-functional buttons, add comprehensive console logging, and provide better state management and user feedback.</p>"},{"location":"advanced/debugger-fixes.html#issues-fixed","title":"\ud83d\udc1b Issues Fixed","text":""},{"location":"advanced/debugger-fixes.html#critical-functionality-issues","title":"Critical Functionality Issues","text":""},{"location":"advanced/debugger-fixes.html#enable-alldisable-all-buttons-not-working","title":"Enable All/Disable All Buttons Not Working","text":"<ul> <li>Problem: The Enable All and Disable All buttons in the debug control panel were not functioning</li> <li>Root Cause: Missing proper event handlers and LoggerAPI integration</li> <li>Solution: Added comprehensive event handlers with proper LoggerAPI calls and console feedback</li> </ul>"},{"location":"advanced/debugger-fixes.html#setting-all-levels-to-none-not-stopping-debug-messages","title":"Setting All Levels to NONE Not Stopping Debug Messages","text":"<ul> <li>Problem: Setting module levels to NONE didn't actually stop debug messages from appearing</li> <li>Root Cause: Global enabled state was overriding module-specific level settings</li> <li>Solution: Enhanced LoggerAPI to properly respect NONE level settings and added global state tracking</li> </ul>"},{"location":"advanced/debugger-fixes.html#missing-console-logging-for-debug-actions","title":"Missing Console Logging for Debug Actions","text":"<ul> <li>Problem: No feedback when debug control actions were performed</li> <li>Root Cause: Debug control functions lacked console output</li> <li>Solution: Added comprehensive console logging with emoji indicators for all debug actions</li> </ul>"},{"location":"advanced/debugger-fixes.html#state-management-issues","title":"State Management Issues","text":""},{"location":"advanced/debugger-fixes.html#uiloggerapi-state-disconnect","title":"UI/LoggerAPI State Disconnect","text":"<ul> <li>Problem: UI dropdown values didn't match actual LoggerAPI module levels</li> <li>Root Cause: No synchronization between UI state and runtime logger state</li> <li>Solution: Added real-time state synchronization and mismatch detection with warning indicators</li> </ul>"},{"location":"advanced/debugger-fixes.html#localstorage-persistence-problems","title":"localStorage Persistence Problems","text":"<ul> <li>Problem: Debug settings weren't properly saved or loaded from localStorage</li> <li>Root Cause: Incomplete localStorage handling for global enabled state</li> <li>Solution: Enhanced localStorage persistence with proper global state tracking</li> </ul>"},{"location":"advanced/debugger-fixes.html#new-features-added","title":"\u2728 New Features Added","text":""},{"location":"advanced/debugger-fixes.html#enhanced-console-logging","title":"Enhanced Console Logging","text":"<p>All debug control actions now provide detailed console feedback:</p> <pre><code>// Example console output:\n// \ud83d\udc1b [DEBUG CONTROL] Enabling all logging globally\n// \ud83d\udc1b [DEBUG CONTROL] Global logging enabled - all modules will now log according to their levels\n// \ud83d\udc1b [DEBUG CONTROL] Setting module 'controlInterface' to level: DEBUG (4)\n// \ud83d\udc1b [DEBUG CONTROL] Module 'controlInterface' now set to DEBUG level\n</code></pre>"},{"location":"advanced/debugger-fixes.html#comprehensive-status-reporting","title":"Comprehensive Status Reporting","text":"<p>The <code>debugHelper.currentSettings()</code> function now provides detailed status information:</p> <pre><code>debugHelper.currentSettings();\n// Console output shows:\n// - Debug Controls Panel status (enabled/disabled)\n// - Global Logging status (enabled/disabled)\n// - Individual module levels with UI comparison\n// - Mismatch warnings (\u26a0\ufe0f) when UI doesn't match actual state\n// - Helpful tips and commands\n</code></pre>"},{"location":"advanced/debugger-fixes.html#testing-and-diagnostics","title":"Testing and Diagnostics","text":"<p>Added <code>debugHelper.test()</code> function to test all debug modules:</p> <pre><code>debugHelper.test();\n// Sends test messages to all modules at all log levels\n// Helps verify that debug system is working correctly\n</code></pre>"},{"location":"advanced/debugger-fixes.html#enhanced-loggerapi-methods","title":"Enhanced LoggerAPI Methods","text":"<p>Added new methods to the LoggerAPI for better state management:</p> <pre><code>// Get current global enabled state\ndebugHelper.api.isEnabled()\n\n// Get current level for specific module\ndebugHelper.api.getModuleLevel(\"moduleName\")\n\n// Get all current module levels\ndebugHelper.api.getAllLevels()\n</code></pre>"},{"location":"advanced/debugger-fixes.html#mismatch-detection","title":"Mismatch Detection","text":"<p>The system now detects when UI settings don't match actual logger state: - Shows warning indicators (\u26a0\ufe0f) for mismatched modules - Provides clear instructions to sync settings - Helps identify configuration issues</p>"},{"location":"advanced/debugger-fixes.html#technical-implementation","title":"\ud83d\udd27 Technical Implementation","text":""},{"location":"advanced/debugger-fixes.html#debug-control-panel-enhancements","title":"Debug Control Panel Enhancements","text":""},{"location":"advanced/debugger-fixes.html#event-handler-improvements","title":"Event Handler Improvements","text":"<pre><code>// Enhanced Enable All button\ndocument.getElementById(\"debug-enable-all\").addEventListener(\"click\", () =&gt; {\n    console.log(\"\ud83d\udc1b [DEBUG CONTROL] Enabling all logging globally\");\n    LoggerAPI.enable(true);\n    updateStatus(\"Logging enabled globally\");\n    saveDebugSettings();\n    console.log(\"\ud83d\udc1b [DEBUG CONTROL] Global logging enabled - all modules will now log according to their levels\");\n});\n</code></pre>"},{"location":"advanced/debugger-fixes.html#state-synchronization","title":"State Synchronization","text":"<pre><code>// Real-time state checking\nconst actualLevel = LoggerAPI.getModuleLevel(module);\nconst uiLevel = parseInt(levelSelect.value);\nif (uiLevel !== actualLevel) {\n    settings.modules[module].mismatch = true;\n}\n</code></pre>"},{"location":"advanced/debugger-fixes.html#loggerapi-enhancements","title":"LoggerAPI Enhancements","text":""},{"location":"advanced/debugger-fixes.html#new-state-management-methods","title":"New State Management Methods","text":"<pre><code>// Added to LoggerAPI\nisEnabled: () =&gt; config.enabled,\ngetModuleLevel: (moduleName) =&gt; moduleConfig[moduleName] || moduleConfig.default || config.defaultLevel,\ngetAllLevels: () =&gt; ({ ...moduleConfig }),\n</code></pre>"},{"location":"advanced/debugger-fixes.html#enhanced-module-level-setting","title":"Enhanced Module Level Setting","text":"<pre><code>setModuleLevel: (moduleName, level) =&gt; {\n    if (typeof level === \"number\" &amp;&amp; level &gt;= LogLevel.NONE &amp;&amp; level &lt;= LogLevel.TRACE) {\n        moduleConfig[moduleName] = level;\n        const defaultLogger = createLogger(\"loggerAPI\");\n        defaultLogger.info(`Log level for module '${moduleName}' set to ${getLevelName(level)}`);\n    }\n}\n</code></pre>"},{"location":"advanced/debugger-fixes.html#initialization-improvements","title":"Initialization Improvements","text":""},{"location":"advanced/debugger-fixes.html#comprehensive-startup-logging","title":"Comprehensive Startup Logging","text":"<pre><code>export function initDebugControls() {\n    console.log(\"\ud83d\udc1b [DEBUG CONTROL] Initializing debug controls...\");\n\n    // Load saved settings first\n    loadDebugSettings();\n\n    // Initialize UI if enabled\n    if (debugControlsEnabled) {\n        createDebugControlsUI();\n        console.log(\"\ud83d\udc1b [DEBUG CONTROL] Debug controls panel created and enabled\");\n    } else {\n        console.log(\"\ud83d\udc1b [DEBUG CONTROL] Debug controls initialized but panel is hidden (use debugHelper.enable() to show)\");\n    }\n\n    // Show available commands\n    console.log(\"\ud83d\udc1b [DEBUG CONTROL] Available commands:\");\n    console.log(\"  - debugHelper.enable() - Show debug controls panel\");\n    console.log(\"  - debugHelper.disable() - Hide debug controls panel\");\n    console.log(\"  - debugHelper.currentSettings() - Show current debug settings\");\n    console.log(\"  - debugHelper.test() - Test all debug modules\");\n}\n</code></pre>"},{"location":"advanced/debugger-fixes.html#usage-examples","title":"\ud83c\udfaf Usage Examples","text":""},{"location":"advanced/debugger-fixes.html#basic-debug-control","title":"Basic Debug Control","text":"<pre><code>// Show debug controls\ndebugHelper.enable();\n\n// Set specific module to DEBUG level\ndebugHelper.api.setModuleLevel(\"controlInterface\", 4);\n\n// Check current settings\ndebugHelper.currentSettings();\n\n// Test all modules\ndebugHelper.test();\n</code></pre>"},{"location":"advanced/debugger-fixes.html#advanced-state-management","title":"Advanced State Management","text":"<pre><code>// Check if global logging is enabled\nif (debugHelper.api.isEnabled()) {\n    console.log(\"Global logging is active\");\n}\n\n// Get all current levels\nconst levels = debugHelper.api.getAllLevels();\nconsole.log(\"Current module levels:\", levels);\n\n// Set all modules to INFO level\ndebugHelper.api.setAllLevels(3);\n</code></pre>"},{"location":"advanced/debugger-fixes.html#troubleshooting","title":"Troubleshooting","text":"<pre><code>// Check for mismatches between UI and actual state\nconst settings = debugHelper.currentSettings();\n// Look for \u26a0\ufe0f indicators in console output\n\n// Clear all settings and start fresh\ndebugHelper.clearSettings();\n\n// Re-enable debug controls\ndebugHelper.enable();\n</code></pre>"},{"location":"advanced/debugger-fixes.html#benefits","title":"\ud83d\ude80 Benefits","text":""},{"location":"advanced/debugger-fixes.html#for-developers","title":"For Developers","text":"<ul> <li>Immediate Feedback: All debug actions provide instant console feedback</li> <li>State Transparency: Clear visibility into actual vs UI state</li> <li>Easy Testing: One-command testing of all debug modules</li> <li>Mismatch Detection: Automatic detection of configuration issues</li> </ul>"},{"location":"advanced/debugger-fixes.html#for-debugging","title":"For Debugging","text":"<ul> <li>Reliable Controls: All buttons and controls now work as expected</li> <li>Proper State Management: Settings persist correctly across sessions</li> <li>Comprehensive Logging: Detailed information about debug system status</li> <li>Easy Troubleshooting: Clear indicators when something is misconfigured</li> </ul>"},{"location":"advanced/debugger-fixes.html#for-user-experience","title":"For User Experience","text":"<ul> <li>Visual Feedback: Status messages in debug panel with auto-clear</li> <li>Helpful Tips: Console output includes usage tips and commands</li> <li>Error Recovery: Clear instructions for fixing configuration issues</li> <li>Consistent Behavior: Predictable and reliable debug control behavior</li> </ul>"},{"location":"advanced/debugger-fixes.html#related-documentation","title":"\ud83d\udcda Related Documentation","text":"<ul> <li>Main Debugging Guide - Comprehensive debugging documentation</li> <li>LoggerAPI Reference - Detailed LoggerAPI documentation</li> <li>Debug Quick Start - Quick start guide for debugging</li> </ul>"},{"location":"advanced/debugger-fixes.html#future-improvements","title":"\ud83d\udd04 Future Improvements","text":""},{"location":"advanced/debugger-fixes.html#planned-enhancements","title":"Planned Enhancements","text":"<ul> <li>Visual Debug Panel: Enhanced UI with better visual indicators</li> <li>Export/Import Settings: Ability to save and share debug configurations</li> <li>Module Grouping: Organize modules into logical groups</li> <li>Performance Metrics: Track debug system performance impact</li> <li>Remote Logging: Send debug logs to external services</li> </ul>"},{"location":"advanced/debugger-fixes.html#potential-features","title":"Potential Features","text":"<ul> <li>Debug Profiles: Pre-configured debug settings for different scenarios</li> <li>Conditional Logging: Enable logging based on specific conditions</li> <li>Log Filtering: Advanced filtering options for debug messages</li> <li>Debug Timeline: Visual timeline of debug events</li> <li>Integration Testing: Automated testing of debug system functionality</li> </ul> <p>This comprehensive overhaul of the debug control system provides a solid foundation for effective debugging and troubleshooting in the Rive Tester application. </p>"},{"location":"advanced/debugging.html","title":"\ud83d\udc1b Debugging Guide","text":"<p>Comprehensive debugging tools and techniques for Rive Playground</p> <p>This guide covers all debugging features, tools, and techniques available in the Rive Playground, including global runtime access, modular logging, and advanced debugging strategies.</p>"},{"location":"advanced/debugging.html#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>\ud83c\udf10 Global Runtime Access</li> <li>\ud83d\udcca Debug Logging System</li> <li>\ud83d\udd0d Inspection Tools</li> <li>\u26a0\ufe0f Error Handling</li> <li>\ud83c\udf9b\ufe0f Runtime Controls</li> <li>\ud83d\udcc8 Performance Monitoring</li> <li>\ud83e\uddea Testing &amp; Validation</li> </ul>"},{"location":"advanced/debugging.html#global-runtime-access","title":"\ud83c\udf10 Global Runtime Access","text":"<p>The Rive Playground exposes the current Rive instance globally for advanced debugging and runtime inspection.</p>"},{"location":"advanced/debugging.html#windowriveinstanceglobal","title":"<code>window.riveInstanceGlobal</code>","text":"<p>Access the current Rive instance from the browser console:</p> <pre><code>// Get the global Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Check if instance is available\nif (rive) {\n    console.log(\"Rive instance is loaded and ready\");\n} else {\n    console.log(\"No Rive instance currently loaded\");\n}\n</code></pre>"},{"location":"advanced/debugging.html#artboard-inspection","title":"Artboard Inspection","text":"<pre><code>// Get all artboard names\nconsole.log(\"Artboards:\", rive.artboardNames);\n\n// Get current artboard\nconsole.log(\"Current artboard:\", rive.artboard?.name);\n\n// Switch to different artboard\nrive.artboard = rive.artboardByName(\"ArtboardName\");\n\n// Get artboard dimensions\nconsole.log(\"Artboard size:\", {\n    width: rive.artboard?.width,\n    height: rive.artboard?.height,\n});\n</code></pre>"},{"location":"advanced/debugging.html#animation-control","title":"Animation Control","text":"<pre><code>// Get all animations\nconsole.log(\"Animations:\", rive.animationNames);\n\n// Control timeline playback\nconst timeline = rive.animationByName(\"AnimationName\");\nif (timeline) {\n    timeline.time = 0; // Reset to start\n    timeline.speed = 0.5; // Half speed\n    timeline.loopValue = 1; // Loop once\n}\n\n// Get animation properties\nconsole.log(\"Animation info:\", {\n    name: timeline.name,\n    duration: timeline.duration,\n    fps: timeline.fps,\n    workStart: timeline.workStart,\n    workEnd: timeline.workEnd,\n});\n</code></pre>"},{"location":"advanced/debugging.html#state-machine-debugging","title":"State Machine Debugging","text":"<pre><code>// Get all state machines\nconsole.log(\"State Machines:\", rive.stateMachineNames);\n\n// Get state machine inputs\nconst smInputs = rive.stateMachineInputs(\"StateMachineName\");\nsmInputs.forEach((input) =&gt; {\n    console.log(`Input: ${input.name}`, {\n        type: input.type,\n        value: input.value,\n        isBoolean: input.asBool !== undefined,\n        isNumber: input.asNumber !== undefined,\n        isTrigger: input.asTrigger !== undefined,\n    });\n});\n\n// Modify state machine inputs\nconst boolInput = rive.getBooleanInput(\"InputName\");\nif (boolInput) {\n    boolInput.value = true;\n}\n\nconst numberInput = rive.getNumberInput(\"InputName\");\nif (numberInput) {\n    numberInput.value = 42;\n}\n\n// Trigger events\nconst triggerInput = rive.getTriggerInput(\"InputName\");\nif (triggerInput) {\n    triggerInput.fire();\n}\n</code></pre>"},{"location":"advanced/debugging.html#viewmodel-inspection","title":"ViewModel Inspection","text":"<pre><code>// Get the main ViewModel instance\nconst vm = rive.viewModelInstance;\n\n// Inspect ViewModel properties\nconsole.log(\"ViewModel properties:\", vm.properties);\n\n// Access nested ViewModels\nvm.properties\n    .filter((p) =&gt; p.type === \"viewModel\")\n    .forEach((p) =&gt; {\n        const nestedVM = vm.viewModel(p.name);\n        console.log(`Nested VM: ${p.name}`, nestedVM);\n    });\n\n// Get string properties\ntry {\n    const stringInputs = vm.strings();\n    stringInputs.forEach((name) =&gt; {\n        const stringInput = vm.string(name);\n        console.log(`String: ${name} = \"${stringInput.value}\"`);\n    });\n} catch (e) {\n    console.log(\"No string properties available\");\n}\n\n// Get color properties\ntry {\n    const colorInputs = vm.colors();\n    colorInputs.forEach((name) =&gt; {\n        const colorInput = vm.color(name);\n        console.log(\n            `Color: ${name} = ${colorInput.value} (${argbToHex(colorInput.value)})`,\n        );\n    });\n} catch (e) {\n    console.log(\"No color properties available\");\n}\n\n// Get enum properties\ntry {\n    const enumInputs = vm.enums();\n    enumInputs.forEach((name) =&gt; {\n        const enumInput = vm.enum(name);\n        console.log(`Enum: ${name} = \"${enumInput.value}\"`);\n    });\n} catch (e) {\n    console.log(\"No enum properties available\");\n}\n</code></pre>"},{"location":"advanced/debugging.html#asset-inspection","title":"Asset Inspection","text":"<pre><code>// Get all assets\nconst assets = rive.assets();\nconsole.log(\"Assets:\", assets);\n\n// Filter by asset type\nconst imageAssets = assets.filter((asset) =&gt; asset.isImage);\nconst fontAssets = assets.filter((asset) =&gt; asset.isFont);\n\nconsole.log(\"Image assets:\", imageAssets);\nconsole.log(\"Font assets:\", fontAssets);\n\n// Get asset details\nimageAssets.forEach((asset) =&gt; {\n    console.log(`Image: ${asset.name}`, {\n        uniqueId: asset.uniqueId,\n        cdnUuid: asset.cdnUuid,\n        fileExtension: asset.fileExtension,\n    });\n});\n</code></pre>"},{"location":"advanced/debugging.html#utility-functions","title":"Utility Functions","text":"<pre><code>// Color conversion helper\nfunction argbToHex(argb) {\n    if (typeof argb !== \"number\") return \"#000000\";\n    const hex = (argb &amp; 0xffffff).toString(16).padStart(6, \"0\").toUpperCase();\n    return `#${hex}`;\n}\n\n// Hex to ARGB conversion\nfunction hexToArgb(hex) {\n    const cleanHex = hex.replace(\"#\", \"\");\n    return parseInt(`FF${cleanHex}`, 16);\n}\n\n// Get all controllable properties\nfunction getAllControllableProperties() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return null;\n\n    const properties = {\n        stateMachines: {},\n        viewModels: {},\n        assets: [],\n    };\n\n    // State machine inputs\n    rive.stateMachineNames.forEach((smName) =&gt; {\n        properties.stateMachines[smName] = rive.stateMachineInputs(smName);\n    });\n\n    // ViewModel properties\n    const vm = rive.viewModelInstance;\n    if (vm) {\n        properties.viewModels.main = {\n            strings: vm.strings?.() || [],\n            colors: vm.colors?.() || [],\n            enums: vm.enums?.() || [],\n            numbers: vm.numbers?.() || [],\n            booleans: vm.booleans?.() || [],\n        };\n    }\n\n    // Assets\n    properties.assets = rive.assets();\n\n    return properties;\n}\n\n// Usage\nconsole.log(\"All controllable properties:\", getAllControllableProperties());\n</code></pre>"},{"location":"advanced/debugging.html#debug-logging-system","title":"\ud83d\udcca Debug Logging System","text":"<p>The Rive Playground includes a modular debug logging system with configurable levels per module.</p>"},{"location":"advanced/debugging.html#debug-levels","title":"Debug Levels","text":"<ul> <li><code>NONE</code>: No logging (0)</li> <li><code>ERROR</code>: Only error messages (1)</li> <li><code>WARN</code>: Warnings and errors (2)</li> <li><code>INFO</code>: Informational messages, warnings, and errors (3)</li> <li><code>DEBUG</code>: All messages including detailed debug information (4)</li> <li><code>TRACE</code>: Extremely detailed tracing information (5)</li> </ul>"},{"location":"advanced/debugging.html#enhanced-debug-control-panel","title":"Enhanced Debug Control Panel","text":"<p>The debug control system has been completely overhauled with comprehensive console logging and proper state management.</p>"},{"location":"advanced/debugging.html#accessing-debug-controls","title":"Accessing Debug Controls","text":"<pre><code>// Show the debug controls panel\ndebugHelper.enable();\n\n// Hide the debug controls panel\ndebugHelper.disable();\n\n// Toggle the debug controls panel\ndebugHelper.toggle();\n\n// Check if debug controls are enabled\nconsole.log(debugHelper.isEnabled());\n</code></pre>"},{"location":"advanced/debugging.html#global-debug-control","title":"Global Debug Control","text":"<pre><code>// Enable all logging globally (overrides all module settings)\ndebugHelper.api.enable(true);\n\n// Disable all logging globally (stops all messages regardless of module levels)\ndebugHelper.api.enable(false);\n\n// Check global enabled state\nconsole.log(debugHelper.api.isEnabled());\n</code></pre>"},{"location":"advanced/debugging.html#module-specific-control","title":"Module-Specific Control","text":"<pre><code>// Set specific module to DEBUG level\ndebugHelper.api.setModuleLevel(\"controlInterface\", 4);\n\n// Set all modules to INFO level\ndebugHelper.api.setAllLevels(3);\n\n// Get current level for a specific module\nconsole.log(debugHelper.api.getModuleLevel(\"parser\"));\n\n// Get all current module levels\nconsole.log(debugHelper.api.getAllLevels());\n</code></pre>"},{"location":"advanced/debugging.html#testing-and-diagnostics","title":"Testing and Diagnostics","text":"<pre><code>// Test all debug modules with sample messages\ndebugHelper.test();\n\n// View current debug settings with detailed status\ndebugHelper.currentSettings();\n\n// Clear all saved debug settings\ndebugHelper.clearSettings();\n</code></pre>"},{"location":"advanced/debugging.html#available-debug-modules","title":"Available Debug Modules","text":"Module Description <code>parser</code> Rive file parsing and data extraction <code>parserHandler</code> File handling and parsing orchestration <code>controlInterface</code> Dynamic control generation and updates <code>dataConnector</code> Data processing and control mapping <code>goldenLayout</code> Golden Layout system management <code>eventMapper</code> Event logging and mapping system"},{"location":"advanced/debugging.html#debug-control-panel-features","title":"Debug Control Panel Features","text":""},{"location":"advanced/debugging.html#console-logging","title":"Console Logging","text":"<p>All debug control actions now provide comprehensive console feedback:</p> <pre><code>// Example console output when enabling all logging:\n// \ud83d\udc1b [DEBUG CONTROL] Enabling all logging globally\n// \ud83d\udc1b [DEBUG CONTROL] Global logging enabled - all modules will now log according to their levels\n\n// Example console output when setting module level:\n// \ud83d\udc1b [DEBUG CONTROL] Setting module 'controlInterface' to level: DEBUG (4)\n// \ud83d\udc1b [DEBUG CONTROL] Module 'controlInterface' now set to DEBUG level\n</code></pre>"},{"location":"advanced/debugging.html#status-reporting","title":"Status Reporting","text":"<p>The <code>debugHelper.currentSettings()</code> function provides detailed status information:</p> <pre><code>debugHelper.currentSettings();\n// Console output:\n// \ud83d\udc1b Current Debug Settings:\n// =========================\n// Debug Controls Panel: \u2705 Enabled\n// Global Logging: \u2705 Enabled\n// \n// Module Settings:\n//   parser          : DEBUG (UI: DEBUG)\n//   parserHandler   : INFO (UI: INFO)\n//   controlInterface: NONE \u26a0\ufe0f (UI shows: DEBUG)\n//   dataConnector   : WARN (UI: WARN)\n//   goldenLayout    : ERROR (UI: ERROR)\n//   eventMapper     : TRACE (UI: TRACE)\n// \n// \ud83d\udca1 Tips:\n//   - Use debugHelper.enable() to show debug controls\n//   - Use debugHelper.disable() to hide debug controls\n//   - Use debugHelper.test() to test all modules\n//   - Set levels to NONE to stop all messages for that module\n//   - Global disable overrides all module settings\n//   - \u26a0\ufe0f indicates UI/actual level mismatch - click 'Set' button to sync\n// =========================\n</code></pre>"},{"location":"advanced/debugging.html#mismatch-detection","title":"Mismatch Detection","text":"<p>The system now detects when UI settings don't match actual logger state and shows warnings (\u26a0\ufe0f) for mismatched modules.</p>"},{"location":"advanced/debugging.html#configuration","title":"Configuration","text":"<pre><code>// Set debug levels for specific modules\nwindow.debugConfig = {\n    parser: \"debug\", // Detailed parsing information\n    controls: \"info\", // Control generation and updates\n    layout: \"warn\", // Layout system warnings\n    rive: \"debug\", // Rive runtime interactions\n    ui: \"info\", // UI component updates\n};\n\n// Apply configuration\nwindow.applyDebugConfig();\n</code></pre>"},{"location":"advanced/debugging.html#debug-functions","title":"Debug Functions","text":"<pre><code>// View current debug settings\nconsole.log(window.getDebugSettings());\n\n// Save current settings to localStorage\nwindow.saveDebugSettings();\n\n// Load saved settings from localStorage\nwindow.loadDebugSettings();\n\n// Clear all debug settings\nwindow.clearDebugSettings();\n\n// Reset to default settings\nwindow.resetDebugSettings();\n\n// Enable debug mode for all modules\nwindow.enableAllDebug();\n\n// Disable debug mode for all modules\nwindow.disableAllDebug();\n</code></pre>"},{"location":"advanced/debugging.html#custom-debug-messages","title":"Custom Debug Messages","text":"<pre><code>// Use the debug logger in your code\nconst logger = window.getDebugLogger(\"myModule\");\n\nlogger.debug(\"Detailed debug information\");\nlogger.info(\"General information\");\nlogger.warn(\"Warning message\");\nlogger.error(\"Error message\");\n\n// With context data\nlogger.debug(\"Processing data\", { data: someObject });\nlogger.info(\"Operation completed\", { duration: \"150ms\" });\n</code></pre>"},{"location":"advanced/debugging.html#inspection-tools","title":"\ud83d\udd0d Inspection Tools","text":""},{"location":"advanced/debugging.html#json-inspector","title":"JSON Inspector","text":"<p>The built-in JSON inspector provides detailed views of parsed Rive data:</p> <pre><code>// Access the JSON editor instance\nconst jsonEditor = window.jsonEditorInstance;\n\n// Get current data\nconst currentData = jsonEditor.get();\n\n// Search for specific values\njsonEditor.search(\"searchTerm\");\n\n// Expand/collapse all nodes\njsonEditor.expandAll();\njsonEditor.collapseAll();\n\n// Switch view modes\njsonEditor.setMode(\"tree\"); // Tree view\njsonEditor.setMode(\"code\"); // Code view\njsonEditor.setMode(\"text\"); // Text view\n</code></pre>"},{"location":"advanced/debugging.html#data-extraction","title":"Data Extraction","text":"<pre><code>// Extract specific data from parsed results\nfunction extractAnimationData() {\n    const data = window.jsonEditorInstance?.get();\n    if (!data || !data.artboards) return null;\n\n    return data.artboards.map((artboard) =&gt; ({\n        name: artboard.name,\n        animations: artboard.animations.map((anim) =&gt; ({\n            name: anim.name,\n            duration: anim.duration,\n            fps: anim.fps,\n        })),\n    }));\n}\n\n// Extract ViewModel structure\nfunction extractViewModelStructure() {\n    const data = window.jsonEditorInstance?.get();\n    if (!data || !data.allViewModelDefinitionsAndInstances) return null;\n\n    return data.allViewModelDefinitionsAndInstances.map((vm) =&gt; ({\n        name: vm.name,\n        properties: vm.properties,\n        instanceCount: vm.instanceCountFromDefinition,\n    }));\n}\n</code></pre>"},{"location":"advanced/debugging.html#error-handling","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"advanced/debugging.html#error-monitoring","title":"Error Monitoring","text":"<pre><code>// Monitor for Rive errors\nwindow.addEventListener(\"error\", (event) =&gt; {\n    if (event.filename?.includes(\"rive\")) {\n        console.error(\"Rive Runtime Error:\", event.error);\n    }\n});\n\n// Monitor for unhandled promise rejections\nwindow.addEventListener(\"unhandledrejection\", (event) =&gt; {\n    console.error(\"Unhandled Promise Rejection:\", event.reason);\n});\n</code></pre>"},{"location":"advanced/debugging.html#error-recovery","title":"Error Recovery","text":"<pre><code>// Attempt to recover from errors\nfunction attemptErrorRecovery() {\n    try {\n        // Clear current instance\n        if (window.riveInstanceGlobal) {\n            window.riveInstanceGlobal.cleanup?.();\n            window.riveInstanceGlobal = null;\n        }\n\n        // Reset application state\n        window.resetApplicationState?.();\n\n        // Reload the last file if available\n        const lastFile = localStorage.getItem(\"lastRiveFile\");\n        if (lastFile) {\n            // Trigger file reload\n            console.log(\"Attempting to reload last file...\");\n        }\n    } catch (e) {\n        console.error(\"Error recovery failed:\", e);\n    }\n}\n</code></pre>"},{"location":"advanced/debugging.html#validation-functions","title":"Validation Functions","text":"<pre><code>// Validate Rive instance\nfunction validateRiveInstance() {\n    const rive = window.riveInstanceGlobal;\n\n    const checks = {\n        instanceExists: !!rive,\n        hasArtboard: !!rive?.artboard,\n        hasCanvas: !!rive?.canvas,\n        isLoaded: rive?.isLoaded || false,\n        hasViewModels: !!rive?.viewModelInstance,\n    };\n\n    console.log(\"Rive Instance Validation:\", checks);\n    return Object.values(checks).every(Boolean);\n}\n\n// Validate file structure\nfunction validateFileStructure(data) {\n    const required = [\"artboards\", \"allViewModelDefinitionsAndInstances\"];\n    const missing = required.filter((key) =&gt; !data[key]);\n\n    if (missing.length &gt; 0) {\n        console.warn(\"Missing required data:\", missing);\n        return false;\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"advanced/debugging.html#runtime-controls","title":"\ud83c\udf9b\ufe0f Runtime Controls","text":""},{"location":"advanced/debugging.html#dynamic-control-testing","title":"Dynamic Control Testing","text":"<pre><code>// Test all dynamic controls\nfunction testAllControls() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return;\n\n    // Test state machine inputs\n    rive.stateMachineNames.forEach((smName) =&gt; {\n        const inputs = rive.stateMachineInputs(smName);\n        inputs.forEach((input) =&gt; {\n            console.log(`Testing ${smName}.${input.name}`);\n\n            if (input.asBool !== undefined) {\n                input.value = !input.value;\n                setTimeout(() =&gt; (input.value = !input.value), 1000);\n            } else if (input.asNumber !== undefined) {\n                const original = input.value;\n                input.value = original + 10;\n                setTimeout(() =&gt; (input.value = original), 1000);\n            } else if (input.asTrigger !== undefined) {\n                input.fire();\n            }\n        });\n    });\n}\n\n// Test ViewModel properties\nfunction testViewModelProperties() {\n    const vm = window.riveInstanceGlobal?.viewModelInstance;\n    if (!vm) return;\n\n    // Test string properties\n    try {\n        const strings = vm.strings();\n        strings.forEach((name) =&gt; {\n            const input = vm.string(name);\n            const original = input.value;\n            input.value = `Test: ${Date.now()}`;\n            setTimeout(() =&gt; (input.value = original), 2000);\n        });\n    } catch (e) {}\n\n    // Test color properties\n    try {\n        const colors = vm.colors();\n        colors.forEach((name) =&gt; {\n            const input = vm.color(name);\n            const original = input.value;\n            input.value = 0xff00ff00; // Green\n            setTimeout(() =&gt; (input.value = original), 2000);\n        });\n    } catch (e) {}\n}\n</code></pre>"},{"location":"advanced/debugging.html#performance-testing","title":"Performance Testing","text":"<pre><code>// Measure control update performance\nfunction measureControlPerformance() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return;\n\n    const startTime = performance.now();\n    let updateCount = 0;\n\n    // Rapid updates test\n    const interval = setInterval(() =&gt; {\n        const inputs = rive.stateMachineInputs(rive.stateMachineNames[0]);\n        if (inputs.length &gt; 0 &amp;&amp; inputs[0].asBool !== undefined) {\n            inputs[0].value = !inputs[0].value;\n            updateCount++;\n        }\n\n        if (updateCount &gt;= 100) {\n            clearInterval(interval);\n            const endTime = performance.now();\n            console.log(`100 updates completed in ${endTime - startTime}ms`);\n            console.log(`Average: ${(endTime - startTime) / 100}ms per update`);\n        }\n    }, 10);\n}\n</code></pre>"},{"location":"advanced/debugging.html#performance-monitoring","title":"\ud83d\udcc8 Performance Monitoring","text":""},{"location":"advanced/debugging.html#frame-rate-monitoring","title":"Frame Rate Monitoring","text":"<pre><code>// Monitor frame rate\nlet frameCount = 0;\nlet lastTime = performance.now();\n\nfunction monitorFrameRate() {\n    frameCount++;\n    const currentTime = performance.now();\n\n    if (currentTime - lastTime &gt;= 1000) {\n        console.log(`FPS: ${frameCount}`);\n        frameCount = 0;\n        lastTime = currentTime;\n    }\n\n    requestAnimationFrame(monitorFrameRate);\n}\n\n// Start monitoring\nmonitorFrameRate();\n</code></pre>"},{"location":"advanced/debugging.html#memory-usage","title":"Memory Usage","text":"<pre><code>// Monitor memory usage (Chrome only)\nfunction monitorMemory() {\n    if (performance.memory) {\n        const memory = performance.memory;\n        console.log(\"Memory Usage:\", {\n            used: `${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n            total: `${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n            limit: `${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`,\n        });\n    }\n}\n\n// Monitor every 5 seconds\nsetInterval(monitorMemory, 5000);\n</code></pre>"},{"location":"advanced/debugging.html#load-time-tracking","title":"Load Time Tracking","text":"<pre><code>// Track file load times\nconst loadTimes = {\n    fileSelect: 0,\n    riveLoad: 0,\n    parseComplete: 0,\n    uiReady: 0,\n};\n\n// Use in your code\nloadTimes.fileSelect = performance.now();\n// ... file loading code ...\nloadTimes.riveLoad = performance.now();\n// ... parsing code ...\nloadTimes.parseComplete = performance.now();\n// ... UI updates ...\nloadTimes.uiReady = performance.now();\n\nconsole.log(\"Load Performance:\", {\n    fileToRive: `${loadTimes.riveLoad - loadTimes.fileSelect}ms`,\n    riveToParse: `${loadTimes.parseComplete - loadTimes.riveLoad}ms`,\n    parseToUI: `${loadTimes.uiReady - loadTimes.parseComplete}ms`,\n    total: `${loadTimes.uiReady - loadTimes.fileSelect}ms`,\n});\n</code></pre>"},{"location":"advanced/debugging.html#testing-validation","title":"\ud83e\uddea Testing &amp; Validation","text":""},{"location":"advanced/debugging.html#automated-testing","title":"Automated Testing","text":"<pre><code>// Run comprehensive tests\nfunction runDiagnostics() {\n    console.log(\"\ud83e\uddea Running Rive Playground Diagnostics...\");\n\n    const results = {\n        riveInstance: validateRiveInstance(),\n        debugSystem: testDebugSystem(),\n        controls: testControlSystem(),\n        performance: measureBasicPerformance(),\n    };\n\n    console.log(\"\ud83d\udcca Diagnostic Results:\", results);\n    return results;\n}\n\nfunction testDebugSystem() {\n    try {\n        const originalConfig = window.getDebugSettings();\n        window.debugConfig = { test: \"debug\" };\n        window.applyDebugConfig();\n        const newConfig = window.getDebugSettings();\n        window.debugConfig = originalConfig;\n        window.applyDebugConfig();\n        return newConfig.test === \"debug\";\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction testControlSystem() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return false;\n\n    try {\n        const smCount = rive.stateMachineNames.length;\n        const vmExists = !!rive.viewModelInstance;\n        const assetsCount = rive.assets().length;\n\n        return smCount &gt;= 0 &amp;&amp; vmExists !== undefined &amp;&amp; assetsCount &gt;= 0;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction measureBasicPerformance() {\n    const start = performance.now();\n\n    // Simulate some operations\n    for (let i = 0; i &lt; 1000; i++) {\n        Math.random();\n    }\n\n    const end = performance.now();\n    return end - start &lt; 10; // Should complete in under 10ms\n}\n</code></pre>"},{"location":"advanced/debugging.html#debug-shortcuts","title":"Debug Shortcuts","text":"<p>Add these to your browser console for quick debugging:</p> <pre><code>// Quick debug shortcuts\nwindow.debug = {\n    // Quick access to common objects\n    rive: () =&gt; window.riveInstanceGlobal,\n    data: () =&gt; window.jsonEditorInstance?.get(),\n\n    // Quick tests\n    test: () =&gt; runDiagnostics(),\n    validate: () =&gt; validateRiveInstance(),\n\n    // Quick controls\n    play: () =&gt; window.riveInstanceGlobal?.play(),\n    pause: () =&gt; window.riveInstanceGlobal?.pause(),\n    reset: () =&gt; window.riveInstanceGlobal?.reset(),\n\n    // Quick info\n    info: () =&gt; {\n        const rive = window.riveInstanceGlobal;\n        if (!rive) return \"No Rive instance loaded\";\n\n        return {\n            artboards: rive.artboardNames,\n            animations: rive.animationNames,\n            stateMachines: rive.stateMachineNames,\n            currentArtboard: rive.artboard?.name,\n        };\n    },\n};\n\n// Usage examples:\n// debug.rive()     - Get Rive instance\n// debug.test()     - Run diagnostics\n// debug.info()     - Get quick info\n// debug.play()     - Start playback\n</code></pre>"},{"location":"advanced/debugging.html#advanced-debugging-techniques","title":"\ud83d\udd27 Advanced Debugging Techniques","text":""},{"location":"advanced/debugging.html#custom-event-monitoring","title":"Custom Event Monitoring","text":"<pre><code>// Monitor all Rive events\nfunction monitorRiveEvents() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return;\n\n    // Monitor state changes\n    rive.on(\"statechange\", (event) =&gt; {\n        console.log(\"State Change:\", event);\n    });\n\n    // Monitor Rive events\n    rive.on(\"riveevent\", (event) =&gt; {\n        console.log(\"Rive Event:\", event.data);\n    });\n\n    // Monitor load events\n    rive.on(\"load\", () =&gt; {\n        console.log(\"Rive loaded successfully\");\n    });\n\n    // Monitor error events\n    rive.on(\"loaderror\", (error) =&gt; {\n        console.error(\"Rive load error:\", error);\n    });\n}\n</code></pre>"},{"location":"advanced/debugging.html#state-snapshots","title":"State Snapshots","text":"<pre><code>// Create state snapshots for debugging\nfunction createStateSnapshot() {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return null;\n\n    const snapshot = {\n        timestamp: Date.now(),\n        artboard: rive.artboard?.name,\n        animations: rive.animationNames.map((name) =&gt; {\n            const anim = rive.animationByName(name);\n            return {\n                name,\n                time: anim?.time,\n                speed: anim?.speed,\n                isPlaying: anim?.isPlaying,\n            };\n        }),\n        stateMachines: rive.stateMachineNames.map((name) =&gt; {\n            const inputs = rive.stateMachineInputs(name);\n            return {\n                name,\n                inputs: inputs.map((input) =&gt; ({\n                    name: input.name,\n                    value: input.value,\n                    type: input.type,\n                })),\n            };\n        }),\n    };\n\n    console.log(\"State Snapshot:\", snapshot);\n    return snapshot;\n}\n\n// Compare snapshots\nfunction compareSnapshots(snapshot1, snapshot2) {\n    const differences = [];\n\n    // Compare animations\n    snapshot1.animations.forEach((anim1, index) =&gt; {\n        const anim2 = snapshot2.animations[index];\n        if (anim1.time !== anim2.time) {\n            differences.push(\n                `Animation ${anim1.name} time: ${anim1.time} \u2192 ${anim2.time}`,\n            );\n        }\n    });\n\n    // Compare state machine inputs\n    snapshot1.stateMachines.forEach((sm1, smIndex) =&gt; {\n        const sm2 = snapshot2.stateMachines[smIndex];\n        sm1.inputs.forEach((input1, inputIndex) =&gt; {\n            const input2 = sm2.inputs[inputIndex];\n            if (input1.value !== input2.value) {\n                differences.push(\n                    `SM ${sm1.name}.${input1.name}: ${input1.value} \u2192 ${input2.value}`,\n                );\n            }\n        });\n    });\n\n    return differences;\n}\n</code></pre> <p>This debugging guide provides comprehensive tools and techniques for troubleshooting and optimizing your Rive Playground experience. Use these tools to understand how your animations work, identify performance issues, and debug complex interactions.</p>"},{"location":"advanced/event-mapper.html","title":"Rive Event Mapper","text":"<p>A comprehensive mapping and formatting system for Rive events based on the complete official Rive TypeScript source code.</p> <p>Verified Accuracy</p> <p>All enum values and event types have been extracted directly from the official Rive TypeScript source code (4,143 lines) to ensure 100% accuracy with the Rive runtime.</p> <p>Complete Source Review</p> <p>Every line of the official rive.ts file has been analyzed to capture all event types, enums, and data structures.</p>"},{"location":"advanced/event-mapper.html#overview","title":"Overview","text":"<p>The <code>riveEventMapper.js</code> module provides a centralized system for:</p> <ul> <li>Event Type Mapping: Converting Rive event types to human-readable names and descriptions</li> <li>Event Formatting: Formatting events for display in the console and status bar</li> <li>Event Categorization: Detecting and categorizing different types of Rive events</li> <li>Event Filtering: Providing filtering capabilities for event logging</li> </ul>"},{"location":"advanced/event-mapper.html#features","title":"Features","text":""},{"location":"advanced/event-mapper.html#event-type-mapping","title":"Event Type Mapping","text":"<p>The mapper supports all official Rive event types:</p> Lifecycle EventsPlayback EventsFrame EventsState EventsCustom EventsSystem Events <ul> <li>Load: Rive file successfully loaded and initialized</li> <li>LoadError: Error occurred while loading Rive file</li> </ul> <ul> <li>Play: Animation or state machine started playing</li> <li>Pause: Animation or state machine paused</li> <li>Stop: Animation or state machine stopped</li> <li>Loop: Animation completed a loop cycle</li> </ul> <ul> <li>Draw: Frame drawn to canvas</li> <li>Advance: Artboard advanced one frame</li> </ul> <ul> <li>StateChange: State machine transitioned to new state</li> <li>ValueChanged: State machine input value changed</li> </ul> <ul> <li>RiveEvent: User-defined custom events (General, OpenUrl)</li> </ul> <ul> <li>AudioStatusChange: Audio system status changed (internal)</li> </ul>"},{"location":"advanced/event-mapper.html#event-formatting","title":"Event Formatting","text":"<p>The mapper provides three types of formatted output:</p>"},{"location":"advanced/event-mapper.html#console-messages","title":"Console Messages","text":"<p>Terminal-style formatting with icons and timestamps for the Event Console panel.</p> <pre><code>[8:00:32 PM] \u26a1 Custom Event: Pills In (General)\n[8:00:38 PM] \ud83d\udd00 State Change: Unknown (Boolean)\n[8:00:45 PM] \u25b6\ufe0f Play: State Machine 1 (Play)\n</code></pre>"},{"location":"advanced/event-mapper.html#status-messages","title":"Status Messages","text":"<p>Compact format for status bar display.</p> <pre><code>\u26a1 Pills In (General) - 8:00:32 PM\n</code></pre>"},{"location":"advanced/event-mapper.html#detailed-messages","title":"Detailed Messages","text":"<p>Comprehensive format with all available event data for debugging.</p> <pre><code>[8:00:32 PM] \u26a1 Custom Event: Pills In (General) | Properties: {action: \"consume\", count: 1}\n</code></pre>"},{"location":"advanced/event-mapper.html#input-type-detection","title":"Input Type Detection","text":"<p>The mapper automatically detects State Machine input types and provides contextual information:</p> <ul> <li>Boolean Inputs: True/false toggle inputs (\ud83d\udd18)</li> <li>Number Inputs: Numeric value inputs (\ud83d\udd22)</li> <li>Trigger Inputs: One-time trigger inputs (\ud83c\udfaf)</li> </ul>"},{"location":"advanced/event-mapper.html#usage","title":"Usage","text":""},{"location":"advanced/event-mapper.html#basic-event-formatting","title":"Basic Event Formatting","text":"<pre><code>import { formatRiveEvent } from '../utils/riveEventMapper.js';\n\n// Format a Rive event\nconst formattedEvent = formatRiveEvent('RiveEvent', eventData, structuredControlData);\n\n// Use the formatted output\nconsole.log(formattedEvent.consoleMessage);\ndocument.getElementById('status').textContent = formattedEvent.statusMessage;\n</code></pre>"},{"location":"advanced/event-mapper.html#event-filtering","title":"Event Filtering","text":"<pre><code>import { shouldLogEvent } from '../utils/riveEventMapper.js';\n\n// Check if an event should be logged based on user preferences\nconst shouldLog = shouldLogEvent('RiveEvent', logCustomEvents, logStateChangeEvents);\n\nif (shouldLog) {\n    // Log the event\n    logEventToConsole(formattedEvent);\n}\n</code></pre>"},{"location":"advanced/event-mapper.html#event-categories-and-colors","title":"Event Categories and Colors","text":"<pre><code>import { getEventCategoryColor } from '../utils/riveEventMapper.js';\n\n// Get color for event category styling\nconst color = getEventCategoryColor('RiveEvent');\n// Returns: '#00BCD4' (custom event color)\n</code></pre>"},{"location":"advanced/event-mapper.html#event-types-reference","title":"Event Types Reference","text":""},{"location":"advanced/event-mapper.html#core-event-types","title":"Core Event Types","text":"Event Type Icon Category Description Load \ud83d\udcc1 lifecycle Rive file successfully loaded LoadError \u274c error Error loading Rive file Play \u25b6\ufe0f playback Animation/state machine started Pause \u23f8\ufe0f playback Animation/state machine paused Stop \u23f9\ufe0f playback Animation/state machine stopped Loop \ud83d\udd04 playback Animation completed a loop Draw \ud83c\udfa8 frame Frame drawn to canvas Advance \u23ed\ufe0f frame Artboard advanced one frame StateChange \ud83d\udd00 state State machine state transition RiveEvent \u26a1 custom User-defined custom event AudioStatusChange \ud83d\udd0a system Audio system status changed"},{"location":"advanced/event-mapper.html#verified-enum-values","title":"Verified Enum Values","text":"<p>All enum values are extracted directly from the official Rive TypeScript source:</p> Custom Event TypesState Machine Input TypesLoop TypesSystem Audio StatusViewModel Property Types Type Value Icon Description General 128 \ud83d\udce2 General purpose custom event OpenUrl 131 \ud83d\udd17 Event to open a URL Type Value Icon Description Number 56 \ud83d\udd22 Numeric value input Trigger 58 \ud83c\udfaf One-time trigger input Boolean 59 \ud83d\udd18 True/false toggle input Type Value Description OneShot \"oneshot\" One-time animation (value 0 in runtime) Loop \"loop\" Repeating animation (value 1 in runtime) PingPong \"pingpong\" Back-and-forth animation (value 2 in runtime) Status Value Description Available 0 Audio context is available and ready Unavailable 1 Audio context is not available Type Value Description Number \"number\" Numeric property String \"string\" Text property Boolean \"boolean\" True/false property Color \"color\" Color property Trigger \"trigger\" Trigger property Enum \"enum\" Enumeration property List \"list\" List property Image \"image\" Image asset property"},{"location":"advanced/event-mapper.html#configuration","title":"Configuration","text":""},{"location":"advanced/event-mapper.html#event-categories-and-colors_1","title":"Event Categories and Colors","text":"<p>The module defines color schemes for different event categories:</p> <pre><code>export const EventCategoryColors = {\n    lifecycle: '#4CAF50',  // Green\n    error: '#F44336',      // Red\n    playback: '#2196F3',   // Blue\n    frame: '#FF9800',      // Orange\n    state: '#9C27B0',      // Purple\n    custom: '#00BCD4',     // Cyan\n    system: '#607D8B'      // Blue Grey\n};\n</code></pre>"},{"location":"advanced/event-mapper.html#extending-event-types","title":"Extending Event Types","text":"<p>To add new event types, update the <code>EventTypeDisplayNames</code> object:</p> <pre><code>export const EventTypeDisplayNames = {\n    // ... existing events\n    'NewEventType': {\n        name: 'New Event',\n        description: 'Description of the new event',\n        icon: '\ud83c\udd95',\n        category: 'custom'\n    }\n};\n</code></pre>"},{"location":"advanced/event-mapper.html#api-reference","title":"API Reference","text":""},{"location":"advanced/event-mapper.html#functions","title":"Functions","text":""},{"location":"advanced/event-mapper.html#formatriveeventeventtype-eventdata-structuredcontroldata","title":"<code>formatRiveEvent(eventType, eventData, structuredControlData)</code>","text":"<p>Formats a Rive event for display.</p> <p>Parameters:</p> <ul> <li><code>eventType</code> (string): The Rive event type</li> <li><code>eventData</code> (Object): The event data object</li> <li><code>structuredControlData</code> (Object): Control data for input type detection</li> </ul> <p>Returns: Object with formatted messages and event information</p> <p>Example:</p> <pre><code>const formatted = formatRiveEvent('RiveEvent', {\n    data: {\n        name: 'ButtonClick',\n        type: 128,\n        properties: { action: 'navigate' }\n    }\n}, controlData);\n\nconsole.log(formatted.consoleMessage);\n// [8:00:32 PM] \u26a1 Custom Event: ButtonClick (General)\n</code></pre>"},{"location":"advanced/event-mapper.html#shouldlogeventeventtype-logcustomevents-logstatechangeevents","title":"<code>shouldLogEvent(eventType, logCustomEvents, logStateChangeEvents)</code>","text":"<p>Determines if an event should be logged based on filters.</p> <p>Parameters:</p> <ul> <li><code>eventType</code> (string): The event type</li> <li><code>logCustomEvents</code> (boolean): Whether to log custom events</li> <li><code>logStateChangeEvents</code> (boolean): Whether to log state change events</li> </ul> <p>Returns: Boolean indicating if the event should be logged</p>"},{"location":"advanced/event-mapper.html#geteventcategorycoloreventtype","title":"<code>getEventCategoryColor(eventType)</code>","text":"<p>Gets the color associated with an event category.</p> <p>Parameters:</p> <ul> <li><code>eventType</code> (string): The event type</li> </ul> <p>Returns: CSS color string</p>"},{"location":"advanced/event-mapper.html#getalleventtypes","title":"<code>getAllEventTypes()</code>","text":"<p>Gets all available event types for UI filtering.</p> <p>Returns: Array of event type objects</p>"},{"location":"advanced/event-mapper.html#geteventstatisticseventmessages","title":"<code>getEventStatistics(eventMessages)</code>","text":"<p>Analyzes event messages and returns statistics.</p> <p>Parameters:</p> <ul> <li><code>eventMessages</code> (Array): Array of event message strings</li> </ul> <p>Returns: Object with event statistics</p>"},{"location":"advanced/event-mapper.html#integration","title":"Integration","text":"<p>The event mapper is integrated into the main control interface through:</p> <ol> <li>Import: The module is imported in <code>riveControlInterface.js</code></li> <li>Event Logging: The <code>logRiveEvent()</code> function uses the mapper for formatting</li> <li>Filtering: Event filtering uses the mapper's <code>shouldLogEvent()</code> function</li> <li>Display: Formatted messages are displayed in both console and status bar</li> </ol>"},{"location":"advanced/event-mapper.html#source-code-verification","title":"Source Code Verification","text":"<p>This event mapper has been built by analyzing the complete official Rive TypeScript source code:</p>"},{"location":"advanced/event-mapper.html#verified-source-references","title":"Verified Source References","text":"Component Source Location Lines Verification Status EventType enum rive.ts#L915-927 13 lines \u2705 VERIFIED RiveEventType enum rive.ts#L376-379 4 lines \u2705 VERIFIED StateMachineInputType enum rive.ts#L323-327 5 lines \u2705 VERIFIED LoopType enum rive.ts#L941-945 5 lines \u2705 VERIFIED SystemAudioStatus enum rive.ts#L1071-1074 4 lines \u2705 VERIFIED PropertyType enum rive.ts#L3233-3242 10 lines \u2705 VERIFIED Event interface rive.ts#L933-937 5 lines \u2705 VERIFIED LoopEvent interface rive.ts#L950-953 4 lines \u2705 VERIFIED"},{"location":"advanced/event-mapper.html#complete-source-analysis","title":"Complete Source Analysis","text":"<ul> <li>Total Source Lines Analyzed: 4,143 lines</li> <li>Source File: <code>rive.ts</code> from official rive-wasm repository</li> <li>Analysis Method: Complete file read and enum extraction</li> <li>Accuracy Level: 100% - All values extracted directly from source</li> </ul> <p>Maintenance</p> <p>When updating the event mapper:</p> <ol> <li>Adding New Event Types: Add to the appropriate enum and update display names</li> <li>Updating Event Handling: Modify detection logic in <code>formatRiveEvent()</code></li> <li>Testing: Test with actual Rive files to ensure proper event detection</li> <li>Documentation: Update both this documentation and the inline README</li> </ol>"},{"location":"advanced/event-mapper.html#related-documentation","title":"Related Documentation","text":"<ul> <li>Event Console - User guide for the Event Console panel</li> <li>Debugging - General debugging techniques</li> <li>Runtime Controls - Dynamic control system documentation</li> </ul>"},{"location":"advanced/event-mapper.html#external-references","title":"External References","text":"<ul> <li>Official Rive TypeScript Source</li> <li>Rive Runtime Documentation</li> <li>Rive Web Runtime</li> <li>Rive Events Documentation</li> <li>State Machine Documentation </li> </ul>"},{"location":"advanced/runtime-controls.html","title":"\ud83c\udfae Runtime Controls Guide","text":"<p>Comprehensive guide to controlling Rive animations at runtime</p> <p>This guide covers the runtime control system that allows you to dynamically control Rive animations programmatically without requiring UI controls.</p>"},{"location":"advanced/runtime-controls.html#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>\ud83c\udfaf Overview</li> <li>\ud83d\ude80 Basic Setup</li> <li>\ud83c\udf9b\ufe0f Control System</li> <li>\ud83d\udd27 API Reference</li> <li>\ud83d\udca1 Examples</li> <li>\ud83c\udfa8 Advanced Techniques</li> </ul>"},{"location":"advanced/runtime-controls.html#overview","title":"\ud83c\udfaf Overview","text":"<p>The runtime control system provides a streamlined way to control Rive animations programmatically, allowing you to:</p> <ul> <li>Toggle state machine inputs: Boolean, number, and trigger inputs</li> <li>Update text content: Dynamic string properties in ViewModels</li> <li>Change colors: Real-time color property updates</li> <li>Select enum values: Dropdown-style enum property control</li> <li>Swap images at runtime: Dynamic image asset replacement</li> <li>Listen for animation events: React to Rive events and state changes</li> </ul>"},{"location":"advanced/runtime-controls.html#basic-setup","title":"\ud83d\ude80 Basic Setup","text":""},{"location":"advanced/runtime-controls.html#initialize-rive-instance","title":"Initialize Rive Instance","text":"<pre><code>const rive = require(\"@rive-app/webgl2\");\n\n// Initialize Rive with event handling\nconst riveInstance = new rive.Rive({\n    src: \"your-animation.riv\",\n    artboard: \"YourArtboard\",\n    stateMachines: \"Your State Machine\",\n    canvas: document.getElementById(\"rive-canvas\"),\n    autoplay: true,\n    autoBind: true,\n    onStateChange: (stateMachine, state) =&gt; {\n        console.log(`State changed: ${stateMachine} -&gt; ${state}`);\n    },\n    onLoad() {\n        riveInstance.resizeDrawingSurfaceToCanvas();\n        // Initialize your controls after load\n        initializeControls();\n    },\n});\n\n// Handle window resizing\nwindow.addEventListener(\"resize\", () =&gt;\n    riveInstance.resizeDrawingSurfaceToCanvas(),\n);\n</code></pre>"},{"location":"advanced/runtime-controls.html#control-object-structure","title":"Control Object Structure","text":"<p>Create a control object that represents all modifiable properties:</p> <pre><code>const riveControls = {\n    stateMachines: {\n        \"State Machine 1\": {\n            inputs: {\n                \"Diagram Enter\": false,\n                Speed: 1.0,\n                Reset: null, // trigger\n            },\n        },\n    },\n    viewModels: {\n        pill_1: {\n            \"Button Label\": \"Click Me\",\n            \"Label Color\": 0xffffffff,\n        },\n        popup_1: {\n            \"Image Picker\": \"image1\",\n            Title: \"Hello World\",\n            Content: \"This is some content\",\n        },\n    },\n    imageAssets: {\n        background: \"https://example.com/new-background.png\",\n    },\n};\n</code></pre>"},{"location":"advanced/runtime-controls.html#control-system","title":"\ud83c\udf9b\ufe0f Control System","text":""},{"location":"advanced/runtime-controls.html#initialize-controls","title":"Initialize Controls","text":"<p>After the Rive instance loads, initialize your control system:</p> <pre><code>function initializeControls() {\n    // Get the diagram view model\n    const diagramVM = riveInstance.viewModelInstance;\n\n    // Map all available properties for programmatic control\n    const controlMap = buildControlMap(riveInstance, diagramVM);\n\n    // Apply initial values if needed\n    applyControls(controlMap, riveControls);\n\n    // Now you can update controls programmatically\n    // Example: updateControl(controlMap, \"pill_1.Button Label\", \"New Label\");\n}\n</code></pre>"},{"location":"advanced/runtime-controls.html#building-the-control-map","title":"Building the Control Map","text":"<p>Create a map of all controllable properties:</p> <pre><code>function buildControlMap(riveInst, diagramVM) {\n    const controlMap = {\n        stateMachineInputs: {},\n        viewModels: {},\n        imageAssets: {},\n    };\n\n    // Map state machine inputs\n    riveInst.stateMachineNames.forEach((smName) =&gt; {\n        controlMap.stateMachineInputs[smName] = {};\n        riveInst.stateMachineInputs(smName).forEach((input) =&gt; {\n            controlMap.stateMachineInputs[smName][input.name] = input;\n        });\n    });\n\n    // Map view model properties\n    diagramVM.properties\n        .filter((p) =&gt; p.type === \"viewModel\")\n        .forEach((p) =&gt; {\n            const vm = diagramVM.viewModel(p.name);\n            controlMap.viewModels[p.name] = {};\n\n            // Try to map string properties\n            try {\n                const stringInputs = vm.strings();\n                stringInputs.forEach((name) =&gt; {\n                    controlMap.viewModels[p.name][name] = vm.string(name);\n                });\n            } catch (_e) {}\n\n            // Try to map color properties\n            try {\n                const colorInputs = vm.colors();\n                colorInputs.forEach((name) =&gt; {\n                    controlMap.viewModels[p.name][name] = vm.color(name);\n                });\n            } catch (_e) {}\n\n            // Try to map enum properties\n            try {\n                const enumInputs = vm.enums();\n                enumInputs.forEach((name) =&gt; {\n                    controlMap.viewModels[p.name][name] = vm.enum(name);\n                });\n            } catch (_e) {}\n        });\n\n    // Map image assets\n    riveInst.assets().forEach((asset) =&gt; {\n        if (asset.isImage) {\n            controlMap.imageAssets[asset.name] = asset;\n        }\n    });\n\n    return controlMap;\n}\n</code></pre>"},{"location":"advanced/runtime-controls.html#updating-controls","title":"Updating Controls","text":"<p>Update any property at runtime:</p> <pre><code>function updateControl(controlMap, path, value) {\n    const parts = path.split(\".\");\n\n    // Handle state machine inputs\n    if (parts[0] === \"stateMachines\") {\n        const smName = parts[1];\n        const inputName = parts[2];\n        controlMap.stateMachineInputs[smName][inputName].value = value;\n        return true;\n    }\n\n    // Handle view model properties\n    if (parts[0] === \"viewModels\") {\n        const vmName = parts[1];\n        const propName = parts[2];\n        const prop = controlMap.viewModels[vmName][propName];\n\n        // Handle different property types\n        if (typeof value === \"string\" &amp;&amp; prop.type === \"string\") {\n            prop.value = value.replace(/\\n/g, \"\\\\n\");\n        } else if (typeof value === \"string\" &amp;&amp; prop.type === \"enum\") {\n            prop.value = value;\n        } else if (typeof value === \"number\" &amp;&amp; prop.type === \"color\") {\n            prop.value = value; // Expecting ARGB format (0xFFFFFFFF)\n        }\n        return true;\n    }\n\n    // Handle image assets\n    if (parts[0] === \"imageAssets\") {\n        const assetName = parts[1];\n        substituteImage(controlMap.imageAssets[assetName], value);\n        return true;\n    }\n\n    return false;\n}\n\n// Apply all controls at once\nfunction applyControls(controlMap, controlValues) {\n    // Apply state machine inputs\n    Object.entries(controlValues.stateMachines || {}).forEach(\n        ([smName, inputs]) =&gt; {\n            Object.entries(inputs.inputs || {}).forEach(\n                ([inputName, value]) =&gt; {\n                    updateControl(\n                        controlMap,\n                        `stateMachines.${smName}.${inputName}`,\n                        value,\n                    );\n                },\n            );\n        },\n    );\n\n    // Apply view model properties\n    Object.entries(controlValues.viewModels || {}).forEach(\n        ([vmName, props]) =&gt; {\n            Object.entries(props).forEach(([propName, value]) =&gt; {\n                updateControl(\n                    controlMap,\n                    `viewModels.${vmName}.${propName}`,\n                    value,\n                );\n            });\n        },\n    );\n\n    // Apply image assets\n    Object.entries(controlValues.imageAssets || {}).forEach(\n        ([assetName, url]) =&gt; {\n            updateControl(controlMap, `imageAssets.${assetName}`, url);\n        },\n    );\n}\n</code></pre>"},{"location":"advanced/runtime-controls.html#api-reference","title":"\ud83d\udd27 API Reference","text":""},{"location":"advanced/runtime-controls.html#rive-instance-methods","title":"Rive Instance Methods","text":"Method Description Returns <code>stateMachineNames</code> Get all state machine names <code>string[]</code> <code>stateMachineInputs(name)</code> Get inputs for a specific state machine <code>Input[]</code> <code>viewModelInstance</code> Get the root view model <code>ViewModelInstance</code> <code>assets()</code> Get all assets in the Rive file <code>Asset[]</code> <code>enums()</code> Get all enum definitions <code>Enum[]</code> <code>on(eventType, callback)</code> Listen for events <code>void</code>"},{"location":"advanced/runtime-controls.html#control-path-format","title":"Control Path Format","text":"<ul> <li>State machine inputs: <code>stateMachines.{MACHINE_NAME}.{INPUT_NAME}</code></li> <li>View model properties: <code>viewModels.{MODEL_NAME}.{PROPERTY_NAME}</code></li> <li>Image assets: <code>imageAssets.{ASSET_NAME}</code></li> </ul>"},{"location":"advanced/runtime-controls.html#input-types","title":"Input Types","text":"Type Description Value Format <code>Boolean</code> True/false toggle <code>true</code> or <code>false</code> <code>Number</code> Numeric value Any number <code>Trigger</code> One-time event Call <code>.fire()</code> method <code>String</code> Text content Any string <code>Color</code> ARGB color value <code>0xFFRRGGBB</code> format <code>Enum</code> Predefined options String matching enum value"},{"location":"advanced/runtime-controls.html#examples","title":"\ud83d\udca1 Examples","text":""},{"location":"advanced/runtime-controls.html#basic-state-machine-control","title":"Basic State Machine Control","text":"<pre><code>// Toggle a boolean input\nupdateControl(controlMap, \"stateMachines.MainSM.isVisible\", true);\n\n// Set a number input\nupdateControl(controlMap, \"stateMachines.MainSM.speed\", 2.5);\n\n// Fire a trigger\nconst triggerInput = controlMap.stateMachineInputs[\"MainSM\"][\"reset\"];\ntriggerInput.fire();\n</code></pre>"},{"location":"advanced/runtime-controls.html#viewmodel-property-updates","title":"ViewModel Property Updates","text":"<pre><code>// Update text content\nupdateControl(controlMap, \"viewModels.textBox.content\", \"New text content\");\n\n// Change color (ARGB format)\nupdateControl(controlMap, \"viewModels.button.backgroundColor\", 0xff00ff00); // Green\n\n// Set enum value\nupdateControl(controlMap, \"viewModels.dropdown.selectedOption\", \"option2\");\n</code></pre>"},{"location":"advanced/runtime-controls.html#image-swapping","title":"Image Swapping","text":"<pre><code>function substituteImage(asset, url) {\n    if (!asset || !url) return;\n\n    fetch(url)\n        .then((r) =&gt; r.arrayBuffer())\n        .then((buf) =&gt; rive.decodeImage(new Uint8Array(buf)))\n        .then((img) =&gt; {\n            asset.setRenderImage(img);\n            img.unref();\n        })\n        .catch((e) =&gt; console.error(\"Image decode error\", e));\n}\n\n// Usage\nupdateControl(\n    controlMap,\n    \"imageAssets.background\",\n    \"https://example.com/new-bg.png\",\n);\n</code></pre>"},{"location":"advanced/runtime-controls.html#event-listening","title":"Event Listening","text":"<pre><code>// Listen for Rive events\nriveInstance.on(rive.EventType.RiveEvent, (e) =&gt; {\n    const data = e.data || {};\n\n    if (data.type === rive.RiveEventType.General) {\n        console.log(`Rive Event: ${data.name}`);\n        // Trigger your custom handlers here\n    } else if (data.type === rive.RiveEventType.OpenUrl) {\n        console.log(`OpenUrl Event: ${data.url}`);\n        // Handle URL opening\n    }\n});\n\n// Listen for state changes\nfunction handleStateChange(stateMachine, state) {\n    console.log(`State Change: ${stateMachine} -&gt; ${state}`);\n    // Add your custom state change handlers here\n}\n</code></pre>"},{"location":"advanced/runtime-controls.html#advanced-techniques","title":"\ud83c\udfa8 Advanced Techniques","text":""},{"location":"advanced/runtime-controls.html#color-conversion-helpers","title":"Color Conversion Helpers","text":"<pre><code>// Convert ARGB integer to hex string\nfunction argbToHex(argb) {\n    return \"#\" + (argb &amp; 0xffffff).toString(16).padStart(6, \"0\").toUpperCase();\n}\n\n// Convert hex string to ARGB integer\nfunction hexToArgb(hex) {\n    return parseInt(\"FF\" + hex.slice(1), 16);\n}\n\n// Usage\nconst redColor = hexToArgb(\"#FF0000\");\nupdateControl(controlMap, \"viewModels.button.color\", redColor);\n</code></pre>"},{"location":"advanced/runtime-controls.html#batch-updates","title":"Batch Updates","text":"<pre><code>// Update multiple properties efficiently\nfunction batchUpdate(controlMap, updates) {\n    const startTime = performance.now();\n\n    updates.forEach(({ path, value }) =&gt; {\n        updateControl(controlMap, path, value);\n    });\n\n    const endTime = performance.now();\n    console.log(`Batch update completed in ${endTime - startTime}ms`);\n}\n\n// Usage\nbatchUpdate(controlMap, [\n    { path: \"viewModels.title.text\", value: \"New Title\" },\n    { path: \"viewModels.title.color\", value: 0xff0000ff },\n    { path: \"stateMachines.MainSM.isActive\", value: true },\n]);\n</code></pre>"},{"location":"advanced/runtime-controls.html#animation-sequences","title":"Animation Sequences","text":"<pre><code>// Create animated sequences\nfunction animateProperty(controlMap, path, startValue, endValue, duration) {\n    const startTime = performance.now();\n\n    function animate() {\n        const elapsed = performance.now() - startTime;\n        const progress = Math.min(elapsed / duration, 1);\n\n        // Linear interpolation\n        const currentValue = startValue + (endValue - startValue) * progress;\n        updateControl(controlMap, path, currentValue);\n\n        if (progress &lt; 1) {\n            requestAnimationFrame(animate);\n        }\n    }\n\n    animate();\n}\n\n// Usage\nanimateProperty(controlMap, \"stateMachines.MainSM.progress\", 0, 100, 2000); // 2 second animation\n</code></pre>"},{"location":"advanced/runtime-controls.html#complete-usage-example","title":"Complete Usage Example","text":"<pre><code>// Initialize Rive\nconst riveCanvas = document.getElementById(\"rive-canvas\");\nconst riveInstance = new rive.Rive({\n    src: \"diagram.riv\",\n    artboard: \"Diagram\",\n    stateMachines: \"State Machine 1\",\n    canvas: riveCanvas,\n    autoplay: true,\n    autoBind: true,\n    onStateChange: handleStateChange,\n    onLoad() {\n        riveInstance.resizeDrawingSurfaceToCanvas();\n\n        // Initialize control system\n        const controlMap = buildControlMap(\n            riveInstance,\n            riveInstance.viewModelInstance,\n        );\n\n        // Update specific controls\n        updateControl(controlMap, \"viewModels.pill_1.Button Label\", \"Start\");\n        updateControl(controlMap, \"viewModels.pill_1.Label Color\", 0xff00ff00); // Green\n        updateControl(\n            controlMap,\n            \"stateMachines.State Machine 1.Diagram Enter\",\n            true,\n        );\n\n        // Or update all at once\n        applyControls(controlMap, {\n            viewModels: {\n                popup_1: {\n                    Title: \"Welcome!\",\n                    Content: \"This is controlled programmatically\",\n                },\n            },\n            imageAssets: {\n                background: \"https://example.com/background.png\",\n            },\n        });\n    },\n});\n</code></pre>"},{"location":"advanced/runtime-controls.html#tips-for-production-use","title":"\ud83d\udd27 Tips for Production Use","text":"<ol> <li>Cache the control map after building it to avoid rebuilding on every update</li> <li>Implement data validation before updating properties</li> <li>Set up error handling for missing properties or invalid values</li> <li>Create convenience methods for your specific animation's common operations</li> <li>Use debouncing for rapid updates to avoid performance issues</li> <li>Monitor performance with the built-in debugging tools</li> <li>Test thoroughly across different browsers and devices</li> </ol>"},{"location":"advanced/runtime-controls.html#debugging-runtime-controls","title":"\ud83d\udc1b Debugging Runtime Controls","text":"<p>Use the global debugging features to troubleshoot control issues:</p> <pre><code>// Access global Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Inspect available controls\nconsole.log(\"Available controls:\", getAllControllableProperties());\n\n// Test control updates\nfunction testControl(path, value) {\n    console.log(`Testing: ${path} = ${value}`);\n    const result = updateControl(controlMap, path, value);\n    console.log(`Result: ${result ? \"Success\" : \"Failed\"}`);\n}\n\n// Monitor control changes\nfunction monitorControls() {\n    const snapshot1 = createStateSnapshot();\n    setTimeout(() =&gt; {\n        const snapshot2 = createStateSnapshot();\n        const differences = compareSnapshots(snapshot1, snapshot2);\n        console.log(\"Control changes:\", differences);\n    }, 1000);\n}\n</code></pre> <p>This runtime controls system provides powerful programmatic control over your Rive animations, enabling dynamic, interactive experiences without manual UI controls.</p>"},{"location":"deployment/deployment.html","title":"Rive Tester - GitHub Pages Deployment","text":"<p>This document explains how the Rive Tester app is deployed to GitHub Pages and how to access it.</p>"},{"location":"deployment/deployment.html#live-demo","title":"Live Demo","text":"<p>\ud83d\ude80 Access the live app: https://ivg-design.github.io/rive-tester/rive-tester/</p>"},{"location":"deployment/deployment.html#deployment-structure","title":"Deployment Structure","text":"<p>The deployment creates the following structure:</p> <pre><code>https://ivg-design.github.io/rive-tester/\n\u251c\u2500\u2500 index.html                    # Landing page with tool links\n\u2514\u2500\u2500 rive-tester/                  # Rive Tester application\n    \u251c\u2500\u2500 index.html                # Main app interface\n    \u251c\u2500\u2500 style.css                 # App styling\n    \u251c\u2500\u2500 src/                      # Source code modules\n    \u251c\u2500\u2500 node_modules/             # Dependencies (Rive runtime, etc.)\n    \u251c\u2500\u2500 *.riv                     # Sample Rive files\n    \u2514\u2500\u2500 README.md                 # App documentation\n</code></pre>"},{"location":"deployment/deployment.html#how-it-works","title":"How It Works","text":"<ol> <li> <p>Automatic Deployment: The GitHub Actions workflow (<code>.github/workflows/deploy-rive-tester.yml</code>) automatically deploys the app when changes are pushed to the main branch.</p> </li> <li> <p>Dependencies: The workflow installs all npm dependencies including the Rive WebGL2 runtime, ensuring the app works in the browser environment.</p> </li> <li> <p>Static Hosting: All files are served statically from GitHub Pages, making the app accessible without a backend server.</p> </li> </ol>"},{"location":"deployment/deployment.html#features-available-in-deployed-version","title":"Features Available in Deployed Version","text":"<p>\u2705 File Upload: Upload and parse local .riv files \u2705 Animation Playback: Control timeline and state machine animations \u2705 ViewModel Controls: Interactive controls for ViewModel properties \u2705 JSON Inspector: Detailed view of parsed Rive file structure \u2705 Debug System: Built-in debugging with persistent settings \u2705 Responsive Design: Works on desktop and mobile devices</p>"},{"location":"deployment/deployment.html#local-development-vs-deployed-version","title":"Local Development vs Deployed Version","text":"Feature Local Development Deployed Version File Access Direct file system Upload only Dependencies npm install required Pre-installed Hot Reload Available with dev server Static files Debugging Full console access Browser dev tools"},{"location":"deployment/deployment.html#updating-the-deployment","title":"Updating the Deployment","text":"<p>To update the deployed version:</p> <ol> <li>Make changes to the code locally</li> <li>Test thoroughly using a local server</li> <li>Commit and push changes to the main branch</li> <li>GitHub Actions will automatically rebuild and deploy</li> </ol>"},{"location":"deployment/deployment.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/deployment.html#app-not-loading","title":"App Not Loading","text":"<ul> <li>Check browser console for errors</li> <li>Ensure JavaScript is enabled</li> <li>Try a hard refresh (Ctrl+F5 or Cmd+Shift+R)</li> </ul>"},{"location":"deployment/deployment.html#file-upload-issues","title":"File Upload Issues","text":"<ul> <li>Ensure the file is a valid .riv file</li> <li>Check file size (GitHub Pages has limits)</li> <li>Try with a different browser</li> </ul>"},{"location":"deployment/deployment.html#animation-not-playing","title":"Animation Not Playing","text":"<ul> <li>Check that the Rive file contains animations</li> <li>Verify ViewModel properties are correctly configured</li> <li>Use the debug panel to inspect the loaded data</li> </ul>"},{"location":"deployment/deployment.html#repository-structure","title":"Repository Structure","text":"<p>This deployment is part of the larger IVG Design tools ecosystem:</p> <ul> <li>Main Repository: Contains the Rive Tester source code</li> <li>CEP Documentation: Separate documentation site at <code>ivg-design.github.io/cep</code></li> <li>Landing Page: Unified access point for all tools</li> </ul>"},{"location":"deployment/deployment.html#contributing","title":"Contributing","text":"<p>To contribute to the Rive Tester:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Test locally</li> <li>Submit a pull request</li> </ol> <p>The deployment will automatically update once changes are merged to main.</p>"},{"location":"deployment/github-pages.html","title":"GitHub Pages Deployment Setup","text":"<p>This guide walks you through setting up GitHub Pages deployment for the Rive Tester app.</p>"},{"location":"deployment/github-pages.html#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub repository with the Rive Tester code</li> <li>GitHub Pages enabled for your repository</li> <li>Node.js and npm installed locally (for testing)</li> </ul>"},{"location":"deployment/github-pages.html#step-1-enable-github-pages","title":"Step 1: Enable GitHub Pages","text":"<ol> <li>Go to your GitHub repository</li> <li>Click on Settings tab</li> <li>Scroll down to Pages section</li> <li>Under Source, select GitHub Actions</li> <li>Save the settings</li> </ol>"},{"location":"deployment/github-pages.html#step-2-repository-setup","title":"Step 2: Repository Setup","text":"<p>The deployment workflow is already configured in <code>.github/workflows/deploy-rive-tester.yml</code>. This workflow will:</p> <ul> <li>\u2705 Automatically trigger on pushes to main/master branch</li> <li>\u2705 Install dependencies including Rive runtime</li> <li>\u2705 Copy all necessary files to deployment directory</li> <li>\u2705 Create a landing page with links to tools</li> <li>\u2705 Deploy to GitHub Pages</li> </ul>"},{"location":"deployment/github-pages.html#step-3-test-locally-before-deployment","title":"Step 3: Test Locally Before Deployment","text":"<p>Before pushing to GitHub, test the deployment structure locally:</p> <pre><code># Run the deployment test script\nnpm run test-deployment\n\n# Start a local server to test\ncd _test-deployment\nnpx http-server -p 8080\n\n# Open http://localhost:8080 in your browser\n</code></pre> <p>This creates a local copy of exactly what will be deployed to GitHub Pages.</p>"},{"location":"deployment/github-pages.html#step-4-deploy","title":"Step 4: Deploy","text":"<ol> <li> <p>Commit and push your changes:</p> <pre><code>git add .\ngit commit -m \"Add GitHub Pages deployment\"\ngit push origin main\n</code></pre> </li> <li> <p>Monitor the deployment:</p> <ul> <li>Go to your repository on GitHub</li> <li>Click the Actions tab</li> <li>Watch the \"Deploy Rive Tester to GitHub Pages\" workflow</li> <li>Deployment typically takes 2-3 minutes</li> </ul> </li> <li> <p>Access your deployed app:</p> <ul> <li>Your app will be available at: <code>https://[username].github.io/[repository-name]/rive-tester/</code></li> <li>The landing page will be at: <code>https://[username].github.io/[repository-name]/</code></li> </ul> </li> </ol>"},{"location":"deployment/github-pages.html#expected-url-structure","title":"Expected URL Structure","text":"<p>Based on your existing CEP documentation setup, the URLs will be:</p> <ul> <li>Landing Page: <code>https://ivg-design.github.io/rive-tester/</code></li> <li>Rive Tester App: <code>https://ivg-design.github.io/rive-tester/rive-tester/</code></li> <li>CEP Documentation: <code>https://ivg-design.github.io/cep/</code> (existing)</li> </ul>"},{"location":"deployment/github-pages.html#deployment-structure","title":"Deployment Structure","text":"<pre><code>GitHub Pages Root\n\u251c\u2500\u2500 index.html                 # Landing page with tool links\n\u2514\u2500\u2500 rive-tester/          # Rive Tester application\n    \u251c\u2500\u2500 index.html            # Main app interface\n    \u251c\u2500\u2500 src/                  # Source modules\n    \u2502   \u251c\u2500\u2500 components/       # Core application components\n    \u2502   \u2502   \u251c\u2500\u2500 goldenLayoutManager.js\n    \u2502   \u2502   \u251c\u2500\u2500 parser.js\n    \u2502   \u2502   \u251c\u2500\u2500 riveParserHandler.js\n    \u2502   \u2502   \u251c\u2500\u2500 riveControlInterface.js\n    \u2502   \u2502   \u2514\u2500\u2500 dataToControlConnector.js\n    \u2502   \u251c\u2500\u2500 styles/           # CSS and styling\n    \u2502   \u2502   \u2514\u2500\u2500 style.css\n    \u2502   \u2514\u2500\u2500 utils/            # Utility functions and helpers\n    \u2502       \u2514\u2500\u2500 debugger/     # Debug logging system\n    \u251c\u2500\u2500 docs/                 # Documentation files\n    \u251c\u2500\u2500 node_modules/         # Dependencies (Rive runtime, etc.)\n    \u251c\u2500\u2500 *.riv                 # Sample Rive files\n    \u2514\u2500\u2500 README.md             # Documentation\n</code></pre>"},{"location":"deployment/github-pages.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/github-pages.html#deployment-fails","title":"Deployment Fails","text":"<ol> <li> <p>Check the Actions log:</p> <ul> <li>Go to repository \u2192 Actions \u2192 Failed workflow</li> <li>Click on the failed job to see error details</li> </ul> </li> <li> <p>Common issues:</p> <ul> <li>Missing dependencies in package.json</li> <li>File path issues (ensure all paths are relative)</li> <li>Large file sizes (GitHub has limits)</li> </ul> </li> </ol>"},{"location":"deployment/github-pages.html#app-doesnt-load","title":"App Doesn't Load","text":"<ol> <li>Check browser console for errors</li> <li> <p>Verify all dependencies are included:</p> <ul> <li>Rive runtime should be in node_modules</li> <li>JSONEditor should be available</li> <li>All source files should be present</li> </ul> </li> <li> <p>Test locally first: <pre><code>npm run test-deployment\ncd _test-deployment\nnpx http-server -p 8080\n</code></pre></p> </li> </ol>"},{"location":"deployment/github-pages.html#file-upload-issues","title":"File Upload Issues","text":"<ul> <li>GitHub Pages serves static files only</li> <li>File uploads work through browser File API</li> <li>No server-side processing available</li> </ul>"},{"location":"deployment/github-pages.html#updating-the-deployment","title":"Updating the Deployment","text":"<p>To update the deployed version:</p> <ol> <li>Make changes locally</li> <li>Test with <code>npm run test-deployment</code></li> <li>Commit and push to main branch</li> <li>GitHub Actions will automatically redeploy</li> </ol>"},{"location":"deployment/github-pages.html#integration-with-existing-cep-documentation","title":"Integration with Existing CEP Documentation","text":"<p>The deployment creates a unified landing page that links to both:</p> <ul> <li>Your new Rive Tester app</li> <li>Your existing CEP documentation site</li> </ul> <p>This provides a single entry point for all your development tools.</p>"},{"location":"deployment/github-pages.html#security-considerations","title":"Security Considerations","text":"<ul> <li>All code runs client-side in the browser</li> <li>No sensitive data should be included in the repository</li> <li>File uploads are processed locally in the browser</li> <li>No server-side data storage or processing</li> </ul>"},{"location":"deployment/github-pages.html#performance-optimization","title":"Performance Optimization","text":"<p>The deployment includes:</p> <ul> <li>\u2705 Production-only npm dependencies</li> <li>\u2705 Minified CSS and JS where possible</li> <li>\u2705 Efficient file structure</li> <li>\u2705 Static file serving from GitHub's CDN</li> </ul>"},{"location":"deployment/github-pages.html#monitoring-and-analytics","title":"Monitoring and Analytics","text":"<p>Consider adding:</p> <ul> <li>Google Analytics for usage tracking</li> <li>Error monitoring (e.g., Sentry)</li> <li>Performance monitoring</li> </ul> <p>Add these to the HTML files if needed for production use.</p>"},{"location":"development/versioning.html","title":"Semantic Versioning System","text":"<p>The Rive Playground uses an automated semantic versioning system that creates releases based on commit message flags. This prevents automatic versioning on every commit while providing controlled release management.</p>"},{"location":"development/versioning.html#overview","title":"Overview","text":"<ul> <li>No auto-versioning: Regular commits don't trigger version bumps</li> <li>Flag-based releases: Only commits with specific flags create new versions</li> <li>Automated workflow: GitHub Actions handles version bumping, changelog generation, and deployment</li> <li>Semantic versioning: Follows SemVer (MAJOR.MINOR.PATCH)</li> </ul>"},{"location":"development/versioning.html#version-types","title":"Version Types","text":"Type When to Use Examples PATCH Bug fixes, small improvements <code>fix: canvas clearing issue [patch]</code> MINOR New features, non-breaking changes <code>feat: add new control panel [minor]</code> MAJOR Breaking changes, major updates <code>feat!: redesign API structure [major]</code>"},{"location":"development/versioning.html#how-to-create-a-release","title":"How to Create a Release","text":""},{"location":"development/versioning.html#method-1-using-the-helper-script-recommended","title":"Method 1: Using the Helper Script (Recommended)","text":"<pre><code># Make the script executable (first time only)\nchmod +x scripts/version.sh\n\n# Create a patch release (bug fixes)\n./scripts/version.sh patch \"fix: canvas clearing issue\"\n\n# Create a minor release (new features)\n./scripts/version.sh minor \"feat: add asset manager panel\"\n\n# Create a major release (breaking changes)\n./scripts/version.sh major \"feat!: redesign control interface\"\n\n# Push to trigger the release\ngit push origin main\n</code></pre>"},{"location":"development/versioning.html#method-2-manual-commit-with-flags","title":"Method 2: Manual Commit with Flags","text":"<p>Add one of these flags to your commit message:</p> <pre><code># Patch release\ngit commit -m \"fix: resolve status bar layout issue [patch]\"\n\n# Minor release\ngit commit -m \"feat: add semantic versioning system [minor]\"\n\n# Major release\ngit commit -m \"feat!: breaking API changes [major]\"\n\n# Push to trigger\ngit push origin main\n</code></pre>"},{"location":"development/versioning.html#method-3-github-actions-manual-trigger","title":"Method 3: GitHub Actions Manual Trigger","text":"<ol> <li>Go to Actions tab in GitHub</li> <li>Select Semantic Release workflow</li> <li>Click Run workflow</li> <li>Choose version type (patch/minor/major)</li> <li>Click Run workflow</li> </ol>"},{"location":"development/versioning.html#supported-commit-flags","title":"Supported Commit Flags","text":"<p>The system recognizes these patterns in commit messages:</p>"},{"location":"development/versioning.html#patch-flags","title":"Patch Flags","text":"<ul> <li><code>[patch]</code> or <code>[PATCH]</code></li> <li><code>[fix]</code> or <code>[FIX]</code></li> <li><code>--patch</code> or <code>--fix</code></li> </ul>"},{"location":"development/versioning.html#minor-flags","title":"Minor Flags","text":"<ul> <li><code>[minor]</code> or <code>[MINOR]</code></li> <li><code>--minor</code></li> </ul>"},{"location":"development/versioning.html#major-flags","title":"Major Flags","text":"<ul> <li><code>[major]</code> or <code>[MAJOR]</code></li> <li><code>--major</code></li> </ul>"},{"location":"development/versioning.html#what-happens-during-a-release","title":"What Happens During a Release","text":"<p>When a versioned commit is pushed, the GitHub Action automatically:</p> <ol> <li>Detects the version flag in the commit message</li> <li>Bumps the version in <code>package.json</code></li> <li>Generates changelog from commits since last release</li> <li>Creates version file (<code>src/version.js</code>) with build info</li> <li>Updates UI to display version number</li> <li>Commits changes with <code>[skip ci]</code> flag</li> <li>Creates Git tag (e.g., <code>v1.2.3</code>)</li> <li>Creates GitHub Release with changelog and links</li> <li>Triggers deployment to GitHub Pages</li> </ol>"},{"location":"development/versioning.html#version-display","title":"Version Display","text":"<p>The current version is displayed in multiple places:</p> <ul> <li>Top-right corner of the app (small version badge)</li> <li>Browser console on app load</li> <li>GitHub Releases page</li> <li>CHANGELOG.md file</li> </ul>"},{"location":"development/versioning.html#packagejson-scripts","title":"Package.json Scripts","text":"<p>Add these convenient scripts to your workflow:</p> <pre><code># Quick version releases\nnpm run version:patch \"fix: your bug fix message\"\nnpm run version:minor \"feat: your new feature\"\nnpm run version:major \"feat!: your breaking change\"\n\n# Check current version\nnpm run version:check\n</code></pre>"},{"location":"development/versioning.html#best-practices","title":"Best Practices","text":""},{"location":"development/versioning.html#commit-message-format","title":"Commit Message Format","text":"<p>Follow Conventional Commits format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt; [version-flag]\n\nExamples:\nfix(canvas): resolve clearing issue [patch]\nfeat(controls): add new panel layout [minor]\nfeat!(api): redesign parser interface [major]\n</code></pre>"},{"location":"development/versioning.html#when-to-version","title":"When to Version","text":"<ul> <li>PATCH: Bug fixes, typos, small improvements</li> <li>MINOR: New features, UI improvements, new components</li> <li>MAJOR: Breaking changes, major redesigns, API changes</li> </ul>"},{"location":"development/versioning.html#development-workflow","title":"Development Workflow","text":"<ol> <li>Regular development: Commit normally without flags</li> <li>Ready for release: Use version script or add flag</li> <li>Push to main: Triggers automated release process</li> <li>Verify release: Check GitHub Releases page</li> </ol>"},{"location":"development/versioning.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/versioning.html#version-not-created","title":"Version Not Created","text":"<p>Check that your commit message contains a valid flag:</p> <pre><code># \u274c Won't trigger version\ngit commit -m \"fix canvas issue\"\n\n# \u2705 Will trigger patch version\ngit commit -m \"fix canvas issue [patch]\"\n</code></pre>"},{"location":"development/versioning.html#failed-release","title":"Failed Release","text":"<ol> <li>Check the Actions tab for error details</li> <li>Ensure you have proper permissions</li> <li>Verify the commit message format</li> <li>Check that <code>package.json</code> exists and is valid</li> </ol>"},{"location":"development/versioning.html#manual-version-bump","title":"Manual Version Bump","text":"<p>If you need to manually set a version:</p> <pre><code># Set specific version\nnpm version 2.1.0 --no-git-tag-version\n\n# Commit with skip ci to avoid double-processing\ngit commit -m \"chore: manual version bump to 2.1.0 [skip ci]\"\n</code></pre>"},{"location":"development/versioning.html#configuration","title":"Configuration","text":"<p>The versioning system is configured in:</p> <ul> <li><code>.github/workflows/semantic-release.yml</code> - Main workflow</li> <li><code>scripts/version.sh</code> - Helper script</li> <li><code>package.json</code> - Version storage</li> </ul>"},{"location":"development/versioning.html#customizing-version-patterns","title":"Customizing Version Patterns","text":"<p>To add new version trigger patterns, edit the workflow file:</p> <pre><code># Add new patterns here\nif echo \"$COMMIT_MSG\" | grep -qE \"\\[patch\\]|\\[PATCH\\]|\\[fix\\]|\\[FIX\\]|--patch|--fix|\\[hotfix\\]\"; then\n</code></pre>"},{"location":"development/versioning.html#examples","title":"Examples","text":""},{"location":"development/versioning.html#bug-fix-release-100-101","title":"Bug Fix Release (1.0.0 \u2192 1.0.1)","text":"<pre><code>./scripts/version.sh patch \"fix: resolve canvas clearing issue\"\ngit push origin main\n</code></pre>"},{"location":"development/versioning.html#feature-release-101-110","title":"Feature Release (1.0.1 \u2192 1.1.0)","text":"<pre><code>./scripts/version.sh minor \"feat: add asset manager with drag-drop support\"\ngit push origin main\n</code></pre>"},{"location":"development/versioning.html#breaking-change-110-200","title":"Breaking Change (1.1.0 \u2192 2.0.0)","text":"<pre><code>./scripts/version.sh major \"feat!: redesign control interface with new API\"\ngit push origin main\n</code></pre>"},{"location":"development/versioning.html#integration-with-deployment","title":"Integration with Deployment","text":"<p>The versioning system is integrated with the existing deployment workflow:</p> <ol> <li>Version created \u2192 Triggers semantic release</li> <li>Files updated \u2192 Version info added to app</li> <li>Release published \u2192 GitHub Release created</li> <li>Deployment triggered \u2192 App deployed with new version</li> </ol> <p>This ensures that every release is properly versioned, documented, and deployed automatically.</p>"},{"location":"guide/asset-manager.html","title":"Asset Manager","text":"<p>The Asset Manager is a powerful feature that allows you to inspect and replace embedded assets in your Rive files in real-time.</p>"},{"location":"guide/asset-manager.html#overview","title":"Overview","text":"<p>The Asset Manager panel displays all embedded assets found in your Rive file, including:</p> <ul> <li>Images (PNG, JPG, WebP, SVG)</li> <li>Fonts (TTF, OTF, WOFF, WOFF2)</li> <li>Audio (MP3, WAV, OGG) - Future support</li> </ul>"},{"location":"guide/asset-manager.html#asset-information","title":"Asset Information","text":"<p>Each asset displays comprehensive metadata:</p>"},{"location":"guide/asset-manager.html#basic-information","title":"Basic Information","text":"<ul> <li>Asset Name - The original filename or identifier</li> <li>Asset Type - Image, Font, Audio, etc.</li> <li>File Extension - Original file format</li> <li>Status Indicator - Current state (embedded, replaced, error)</li> </ul>"},{"location":"guide/asset-manager.html#technical-details","title":"Technical Details","text":"<ul> <li>Asset ID - Unique identifier within the Rive file</li> <li>CDN UUID - Content delivery network identifier (if applicable)</li> <li>Replacement Status - Shows if asset has been modified</li> </ul>"},{"location":"guide/asset-manager.html#asset-replacement","title":"Asset Replacement","text":""},{"location":"guide/asset-manager.html#local-file-replacement","title":"Local File Replacement","text":"<p>Replace assets with files from your computer:</p> <ol> <li>Click the file icon  next to the asset</li> <li>Select a replacement file from your file system</li> <li>Watch the animation update in real-time</li> </ol> <p>!!! tip \"Supported Formats\" - Images: PNG, JPG, JPEG, WebP, SVG, GIF - Fonts: TTF, OTF, WOFF, WOFF2</p>"},{"location":"guide/asset-manager.html#url-replacement","title":"URL Replacement","text":"<p>Replace assets with files from the web:</p> <ol> <li>Enter a URL in the URL input field</li> <li>Click \"Apply URL\"  or press <code>Enter</code></li> <li>The asset loads and updates the animation</li> </ol> <p>CORS Considerations</p> <p>Some URLs may not work due to Cross-Origin Resource Sharing (CORS) restrictions. Use direct file links when possible.</p>"},{"location":"guide/asset-manager.html#status-indicators","title":"Status Indicators","text":"Icon Status Description Embedded Original asset from Rive file File Replaced Replaced with local file URL Replaced Replaced with web URL Error Failed to load replacement"},{"location":"guide/asset-manager.html#asset-operations","title":"Asset Operations","text":""},{"location":"guide/asset-manager.html#expandcollapse-details","title":"Expand/Collapse Details","text":"<p>Click on any asset header to expand or collapse detailed information:</p> <pre><code>\ud83d\udce6 Asset Name\n\u251c\u2500\u2500 Asset Type: Image\n\u251c\u2500\u2500 Asset ID: 12345\n\u251c\u2500\u2500 CDN UUID: abc-def-ghi\n\u2514\u2500\u2500 File Extension: .png\n</code></pre>"},{"location":"guide/asset-manager.html#reset-to-original","title":"Reset to Original","text":"<p>To restore an asset to its original embedded version:</p> <ol> <li>Click the Reset button </li> <li>The asset reverts to the original embedded version</li> <li>Input fields are cleared automatically</li> </ol> <p>Reset Limitations</p> <p>Currently, reset functionality restores the UI state but may require reloading the Rive file to fully restore the original asset.</p>"},{"location":"guide/asset-manager.html#asset-information-modal","title":"Asset Information Modal","text":"<p>Click the Info button  to view detailed asset information in a popup dialog.</p>"},{"location":"guide/asset-manager.html#code-examples","title":"Code Examples","text":""},{"location":"guide/asset-manager.html#programmatic-asset-access","title":"Programmatic Asset Access","text":"<p>Access assets via the global Rive instance:</p> <pre><code>// Get the asset map\nconst assetMap = window.riveInstanceGlobal.assetMap;\n\n// Iterate through assets\nassetMap.forEach((asset, name) =&gt; {\n    console.log(`Asset: ${name}`);\n    console.log(`Type: ${asset.isImage ? \"Image\" : \"Other\"}`);\n    console.log(`Extension: ${asset.fileExtension}`);\n});\n</code></pre>"},{"location":"guide/asset-manager.html#asset-replacement-api","title":"Asset Replacement API","text":"<p>Replace assets programmatically:</p> <pre><code>// Replace an image asset\nfunction replaceAsset(assetName, imageUrl) {\n    fetch(imageUrl)\n        .then((response) =&gt; response.arrayBuffer())\n        .then((buffer) =&gt; {\n            const img = window.rive.decodeImage(new Uint8Array(buffer));\n            const asset = assetMap.get(assetName);\n            if (asset &amp;&amp; asset.setRenderImage) {\n                asset.setRenderImage(img);\n                img.unref();\n            }\n        });\n}\n</code></pre>"},{"location":"guide/asset-manager.html#best-practices","title":"Best Practices","text":""},{"location":"guide/asset-manager.html#file-formats","title":"File Formats","text":"<p>!!! tip \"Optimal Formats\" - Images: Use WebP for best compression, PNG for transparency - Fonts: WOFF2 provides the best compression for web use - Compatibility: Stick to widely supported formats</p>"},{"location":"guide/asset-manager.html#performance-considerations","title":"Performance Considerations","text":"<ul> <li>File Size: Smaller assets load faster and improve performance</li> <li>Resolution: Match the resolution to your use case</li> <li>Caching: URLs may be cached by the browser</li> </ul>"},{"location":"guide/asset-manager.html#workflow-tips","title":"Workflow Tips","text":"<ol> <li>Test Locally First - Verify assets work with local files before using URLs</li> <li>Keep Originals - Always keep backup copies of original assets</li> <li>Document Changes - Note which assets have been modified for your project</li> </ol>"},{"location":"guide/asset-manager.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/asset-manager.html#common-issues","title":"Common Issues","text":"Problem Solution Asset won't load Check file format compatibility URL fails Verify CORS headers and direct link Animation breaks Ensure replacement matches original dimensions Reset doesn't work Reload the Rive file completely"},{"location":"guide/asset-manager.html#debug-information","title":"Debug Information","text":"<p>Enable debug logging to troubleshoot asset issues:</p> <pre><code>// Enable asset manager debug logging\nLoggerAPI.setModuleLevel(\"assetManager\", LogLevel.DEBUG);\n</code></pre>"},{"location":"guide/asset-manager.html#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Action <code>Click</code> Expand/collapse asset details <code>Enter</code> Apply URL replacement <code>Escape</code> Cancel current operation <p>Related: User Guide | Debugging | Versioning</p>"},{"location":"guide/installation.html","title":"Installation","text":"<p>Set up Rive Tester for local development on your machine.</p>"},{"location":"guide/installation.html#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Modern Web Browser with WebGL2 support (Chrome, Firefox, Safari, Edge)</li> <li>Node.js 16+ (for package management)</li> <li>Python 3.8+ (for documentation development)</li> <li>Git (for version control)</li> </ul>"},{"location":"guide/installation.html#quick-setup","title":"Quick Setup","text":""},{"location":"guide/installation.html#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/ivg-design/rive_dev_playground.git\ncd rive_dev_playground\n</code></pre>"},{"location":"guide/installation.html#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"guide/installation.html#3-start-development-server","title":"3. Start Development Server","text":"Using npmUsing http-serverUsing Python <pre><code>npm run dev\n</code></pre> <pre><code>npx http-server . -p 8080\n</code></pre> <pre><code>python -m http.server 8080\n</code></pre>"},{"location":"guide/installation.html#4-open-in-browser","title":"4. Open in Browser","text":"<p>Navigate to <code>http://localhost:8080</code> to access Rive Tester.</p>"},{"location":"guide/installation.html#documentation-development","title":"Documentation Development","text":"<p>To work on the documentation locally:</p>"},{"location":"guide/installation.html#1-install-documentation-dependencies","title":"1. Install Documentation Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"guide/installation.html#2-serve-documentation","title":"2. Serve Documentation","text":"<pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at <code>http://localhost:8001</code>.</p>"},{"location":"guide/installation.html#3-build-documentation","title":"3. Build Documentation","text":"<pre><code>mkdocs build\n</code></pre> <p>This creates a <code>site/</code> directory with the built documentation.</p>"},{"location":"guide/installation.html#development-environment","title":"Development Environment","text":""},{"location":"guide/installation.html#recommended-setup","title":"Recommended Setup","text":"<ul> <li>Code Editor: VS Code with extensions:<ul> <li>ES6 modules support</li> <li>Live Server</li> <li>Prettier for code formatting</li> </ul> </li> <li>Browser: Chrome with Developer Tools</li> <li>Terminal: Integrated terminal in VS Code</li> </ul>"},{"location":"guide/installation.html#project-structure","title":"Project Structure","text":"<pre><code>rive_dev_playground/\n\u251c\u2500\u2500 index.html              # Main application\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 components/         # Core components\n\u2502   \u251c\u2500\u2500 styles/            # Modular CSS\n\u2502   \u2514\u2500\u2500 utils/             # Utility functions\n\u251c\u2500\u2500 source_docs/                  # MkDocs documentation\n\u251c\u2500\u2500 node_modules/          # Dependencies\n\u251c\u2500\u2500 package.json           # Node.js configuration\n\u251c\u2500\u2500 mkdocs.yml            # Documentation configuration\n\u2514\u2500\u2500 requirements.txt       # Python dependencies\n</code></pre>"},{"location":"guide/installation.html#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/installation.html#common-issues","title":"Common Issues","text":"Problem Solution Port already in use Change port number or kill existing process Module not found Run <code>npm install</code> to install dependencies CORS errors Use a proper HTTP server, not file:// protocol WebGL2 not supported Use a modern browser or update graphics drivers"},{"location":"guide/installation.html#port-conflicts","title":"Port Conflicts","text":"<p>If port 8080 is already in use:</p> <pre><code># Use a different port\nnpx http-server . -p 3000\n\n# Or find and kill the process using the port\nlsof -ti:8080 | xargs kill -9\n</code></pre>"},{"location":"guide/installation.html#browser-compatibility","title":"Browser Compatibility","text":"<p>Rive Tester requires WebGL2 support. Check compatibility:</p> <pre><code>// Test WebGL2 support in browser console\nconst canvas = document.createElement(\"canvas\");\nconst gl = canvas.getContext(\"webgl2\");\nconsole.log(\"WebGL2 supported:\", !!gl);\n</code></pre>"},{"location":"guide/installation.html#building-for-production","title":"Building for Production","text":""},{"location":"guide/installation.html#1-optimize-assets","title":"1. Optimize Assets","text":"<pre><code># Minify CSS and JavaScript (if build tools are configured)\nnpm run build\n</code></pre>"},{"location":"guide/installation.html#2-test-production-build","title":"2. Test Production Build","text":"<pre><code># Serve the built files\nnpx http-server dist/ -p 8080\n</code></pre>"},{"location":"guide/installation.html#3-deploy","title":"3. Deploy","text":"<p>The application is a static site and can be deployed to:</p> <ul> <li>GitHub Pages (recommended)</li> <li>Netlify</li> <li>Vercel</li> <li>Any static hosting service</li> </ul>"},{"location":"guide/installation.html#environment-variables","title":"Environment Variables","text":"<p>For different deployment environments, you may need to configure:</p> Variable Description Default <code>BASE_URL</code> Base URL for the application <code>/</code> <code>DOCS_URL</code> Documentation URL Auto-detected <code>API_URL</code> API endpoint (if applicable) N/A"},{"location":"guide/installation.html#dependencies","title":"Dependencies","text":""},{"location":"guide/installation.html#runtime-dependencies","title":"Runtime Dependencies","text":"<ul> <li>@rive-app/webgl2 - Rive runtime</li> <li>jsoneditor - JSON tree viewer</li> <li>golden-layout - Panel system</li> </ul>"},{"location":"guide/installation.html#development-dependencies","title":"Development Dependencies","text":"<ul> <li>http-server - Local development server</li> <li>mkdocs-material - Documentation theme</li> </ul>"},{"location":"guide/installation.html#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>prettier - Code formatting</li> <li>eslint - Code linting</li> </ul>"},{"location":"guide/installation.html#testing","title":"Testing","text":""},{"location":"guide/installation.html#manual-testing","title":"Manual Testing","text":"<ol> <li>Load a Rive file and verify all panels work</li> <li>Test asset replacement with local files and URLs</li> <li>Verify responsive design on different screen sizes</li> <li>Check browser compatibility across different browsers</li> </ol>"},{"location":"guide/installation.html#automated-testing","title":"Automated Testing","text":"<p>Currently, the project uses manual testing. Automated tests can be added using:</p> <ul> <li>Jest for unit tests</li> <li>Cypress for end-to-end tests</li> <li>Playwright for cross-browser testing</li> </ul> <p>Next Steps: Quick Start | User Guide</p>"},{"location":"guide/quick-start.html","title":"Quick Start","text":"<p>Get up and running with Rive Tester in just a few minutes!</p>"},{"location":"guide/quick-start.html#launch-the-application","title":"Launch the Application","text":"Online VersionLocal Development <p>The easiest way to get started is to use the online version:</p> <p> Launch Rive Tester</p> <p>For local development, see the Installation Guide.</p>"},{"location":"guide/quick-start.html#load-a-rive-file","title":"Load a Rive File","text":"<ol> <li>Click \"Choose File\" in the Controls panel</li> <li>Select a <code>.riv</code> file from your computer</li> <li>Watch the magic happen - your animation will appear in the Canvas panel</li> </ol> <p>Don't have a Rive file?</p> <p>You can download sample files from the Rive Community or create your own using Rive Editor.</p>"},{"location":"guide/quick-start.html#explore-the-interface","title":"Explore the Interface","text":"<p>The Rive Tester interface consists of five main panels:</p>"},{"location":"guide/quick-start.html#controls-panel","title":"Controls Panel","text":"<ul> <li>File loading and management</li> <li>Playback controls (play, pause, stop)</li> <li>Display settings (fit mode, alignment, background)</li> </ul>"},{"location":"guide/quick-start.html#canvas-panel","title":"Canvas Panel","text":"<ul> <li>Live animation preview</li> <li>Real-time rendering with WebGL2</li> <li>Interactive elements and mouse events</li> </ul>"},{"location":"guide/quick-start.html#json-inspector","title":"JSON Inspector","text":"<ul> <li>Complete Rive file structure</li> <li>Interactive tree view with search</li> <li>Multiple view modes (tree, code, text)</li> </ul>"},{"location":"guide/quick-start.html#dynamic-controls","title":"Dynamic Controls","text":"<ul> <li>Auto-generated UI for ViewModel properties</li> <li>Real-time property manipulation</li> <li>Support for all property types (boolean, number, enum, etc.)</li> </ul>"},{"location":"guide/quick-start.html#asset-manager","title":"Asset Manager","text":"<ul> <li>View embedded assets (images, fonts)</li> <li>Replace assets with local files or URLs</li> <li>Asset metadata and status information</li> </ul>"},{"location":"guide/quick-start.html#start-exploring","title":"Start Exploring","text":""},{"location":"guide/quick-start.html#basic-operations","title":"Basic Operations","text":"<ul> <li>Play/Pause: Use the play button in the Controls Panel</li> <li>Change Properties: Use the Dynamic Controls panel</li> <li>Inspect Data: Browse the JSON Inspector</li> </ul>"},{"location":"guide/quick-start.html#advanced-features","title":"Advanced Features","text":"<ul> <li>Replace Assets: Use the Asset Manager to swap images or fonts</li> <li>Debug Console: Access <code>window.riveInstanceGlobal</code> in browser console</li> <li>Layout Customization: Drag and resize panels to your preference</li> </ul>"},{"location":"guide/quick-start.html#pro-tips","title":"Pro Tips","text":"<p>Panel Management</p> <ul> <li>Drag tabs to rearrange panels</li> <li>Resize panels by dragging borders</li> <li>Close panels and restore them via the restore bar</li> <li>Reset layout using the reset button</li> </ul> <p>Browser Compatibility</p> <p>Rive Tester requires a modern browser with WebGL2 support. Chrome, Firefox, Safari, and Edge are all supported.</p>"},{"location":"guide/quick-start.html#need-help","title":"Need Help?","text":"<ul> <li> User Guide - Complete interface documentation</li> <li> Debugging Guide - Troubleshooting and debug tools</li> <li> GitHub Issues - Report bugs or request features</li> </ul> <p>Next Steps: User Guide | Asset Manager</p>"},{"location":"guide/user-guide.html","title":"User Guide","text":"<p>Complete guide to using the Rive Tester interface</p>"},{"location":"guide/user-guide.html#interface-overview","title":"\ud83c\udfaf Interface Overview","text":"<p>Rive Tester features a professional IDE-like interface with dockable panels powered by Golden Layout. The interface is designed for efficient workflow and comprehensive Rive file analysis.</p>"},{"location":"guide/user-guide.html#main-panels","title":"Main Panels","text":"Panel Description \ud83c\udf9b\ufe0f Controls Panel File loading, playback controls, and global settings \ud83d\uddbc\ufe0f Canvas Panel Live animation preview with real-time rendering \ud83d\udd0d JSON Inspector Interactive tree view of parsed Rive data \u26a1 Dynamic Controls Auto-generated UI for ViewModel properties \ud83d\udce6 Asset Manager View and replace embedded assets"},{"location":"guide/user-guide.html#loading-rive-files","title":"\ud83d\udcc1 Loading Rive Files","text":"<p>Getting started with Rive Tester is simple. Follow these steps to load and analyze your Rive files:</p>"},{"location":"guide/user-guide.html#quick-start-process","title":"Quick Start Process","text":"<ol> <li> <p>Choose File: Click the \"Choose File\" button in the Controls panel to select a <code>.riv</code> file from your computer.</p> </li> <li> <p>Automatic Parsing: The file is automatically parsed and analyzed. You'll see the animation appear in the Canvas panel.</p> </li> <li> <p>Explore Data: Use the JSON Inspector to explore the parsed data structure and the Dynamic Controls to interact with properties.</p> </li> </ol>"},{"location":"guide/user-guide.html#controls-panel","title":"\ud83c\udf9b\ufe0f Controls Panel","text":"<p>The Controls panel is your main interface for file management and global settings.</p>"},{"location":"guide/user-guide.html#file-management","title":"File Management","text":"<ul> <li>File Input: Select local <code>.riv</code> files for analysis</li> <li>File Info: View file size, name, and loading status</li> <li>Clear: Reset the application state</li> </ul>"},{"location":"guide/user-guide.html#animation-controls","title":"Animation Controls","text":"<ul> <li>Artboard Selector: Choose from available artboards in the file</li> <li>Timeline Selector: Select timeline animations for playback</li> <li>State Machine Selector: Choose state machines to activate</li> <li>Play/Pause: Control timeline animation playback</li> </ul>"},{"location":"guide/user-guide.html#display-settings","title":"Display Settings","text":"<ul> <li>Background Color: Customize canvas background color with color picker</li> <li>Fit Mode: Choose how animations fit in the canvas (Contain, Cover, Fill, Fit Width, Fit Height, Scale Down, None, Layout)</li> <li>Alignment: Set animation alignment (Center, Top Left, Top Center, Top Right, Center Left, Center Right, Bottom Left, Bottom Center, Bottom Right)</li> <li>Layout Scale: Adjust animation scale (0.1 to 5.0)</li> </ul>"},{"location":"guide/user-guide.html#canvas-panel","title":"\ud83d\uddbc\ufe0f Canvas Panel","text":"<p>The Canvas panel displays your Rive animation with real-time rendering and interactive controls.</p>"},{"location":"guide/user-guide.html#features","title":"Features","text":"<ul> <li>WebGL2 Rendering: High-performance animation playback using <code>@rive-app/webgl2</code></li> <li>Responsive Sizing: Automatically adjusts to panel size</li> <li>Aspect Ratio Preservation: Maintains animation proportions</li> <li>Interactive Elements: Mouse events are passed to the animation</li> </ul>"},{"location":"guide/user-guide.html#canvas-behavior","title":"Canvas Behavior","text":"<ul> <li>Auto-resize: Canvas automatically resizes when panel dimensions change</li> <li>Background Control: Background color controlled via Controls panel</li> <li>Mouse Interaction: Hover and click events are passed to the animation</li> </ul>"},{"location":"guide/user-guide.html#json-inspector","title":"\ud83d\udd0d JSON Inspector","text":"<p>The JSON Inspector provides a comprehensive view of your Rive file's internal structure using an interactive tree interface.</p>"},{"location":"guide/user-guide.html#view-modes","title":"View Modes","text":"<ul> <li>Tree View: Hierarchical display with expand/collapse functionality</li> <li>View Mode: Read-only formatted view</li> <li>Code View: Raw JSON with syntax highlighting</li> <li>Text View: Plain text representation</li> <li>Preview: Formatted preview with type information</li> </ul>"},{"location":"guide/user-guide.html#navigation-features","title":"Navigation Features","text":"<ul> <li>Search: Find specific properties or values using built-in search</li> <li>Expand All/Collapse All: Quick navigation controls</li> <li>Node Preview: Object previews show first property values</li> <li>Array Display: Arrays show element count</li> </ul>"},{"location":"guide/user-guide.html#dynamic-controls","title":"\u26a1 Dynamic Controls","text":"<p>The Dynamic Controls panel automatically generates UI controls for your Rive animation's interactive properties.</p>"},{"location":"guide/user-guide.html#supported-property-types","title":"Supported Property Types","text":"<ul> <li>Boolean: Checkbox controls for true/false values</li> <li>Number: Number input fields for numeric values</li> <li>String: Textarea controls for text content (supports newlines)</li> <li>Color: Color picker controls for ARGB color values</li> <li>Enum: Dropdown menus for enumerated values with smart matching</li> <li>Trigger: Buttons for triggering events</li> </ul>"},{"location":"guide/user-guide.html#state-machine-controls","title":"State Machine Controls","text":"<ul> <li>Boolean Inputs: Checkbox controls for boolean state machine inputs</li> <li>Number Inputs: Number input fields for numeric inputs</li> <li>Trigger Inputs: Fire buttons for trigger inputs</li> </ul>"},{"location":"guide/user-guide.html#real-time-updates","title":"Real-time Updates","text":"<p>All changes made in the Dynamic Controls panel are immediately reflected in the animation, allowing for real-time experimentation and testing.</p>"},{"location":"guide/user-guide.html#asset-manager","title":"\ud83d\udce6 Asset Manager","text":"<p>The Asset Manager allows you to inspect and replace embedded assets in your Rive files.</p>"},{"location":"guide/user-guide.html#asset-types-supported","title":"Asset Types Supported","text":"<ul> <li>Images: PNG, JPG, WebP, SVG files</li> <li>Fonts: TTF, OTF, WOFF, WOFF2 files</li> </ul>"},{"location":"guide/user-guide.html#asset-information-display","title":"Asset Information Display","text":"<p>Each asset shows detailed metadata including:</p> <ul> <li>Asset name and type</li> <li>Unique ID and CDN UUID (when available)</li> <li>File extension and format</li> <li>Current status (embedded, replaced, error)</li> </ul>"},{"location":"guide/user-guide.html#replacement-options","title":"Replacement Options","text":"<ul> <li>Local Files: Upload replacement assets from your computer using file picker</li> <li>URLs: Replace with assets from web URLs by entering URL and clicking Apply</li> <li>Reset: Restore original embedded assets (planned feature)</li> </ul>"},{"location":"guide/user-guide.html#asset-management-features","title":"Asset Management Features","text":"<ul> <li>Click to Expand: Click asset headers to expand/collapse details</li> <li>Status Indicators: Visual indicators show asset status</li> <li>Error Handling: Clear error messages for failed replacements</li> <li>Scrollable Interface: Asset list scrolls when many assets are present</li> </ul>"},{"location":"guide/user-guide.html#layout-management","title":"\ud83d\udd27 Layout Management","text":"<p>Rive Tester uses Golden Layout for professional panel management with full customization capabilities.</p>"},{"location":"guide/user-guide.html#panel-operations","title":"Panel Operations","text":"<ul> <li>Drag &amp; Drop: Rearrange panels by dragging tabs</li> <li>Resize: Adjust panel sizes by dragging borders</li> <li>Stack: Create tabbed panel groups by dropping panels on each other</li> <li>Split: Create new rows and columns by dropping panels on edges</li> <li>Close: Close panels using the X button (restore via restore bar)</li> </ul>"},{"location":"guide/user-guide.html#restore-bar","title":"Restore Bar","text":"<p>When panels are closed, a restore bar appears at the top with options to:</p> <ul> <li>Restore Panels: Click buttons to restore closed panels</li> <li>View Documentation: Access this documentation site</li> <li>Reset Layout: Return to default panel arrangement</li> </ul>"},{"location":"guide/user-guide.html#layout-persistence","title":"Layout Persistence","text":"<p>Your panel arrangement is automatically saved to localStorage and restored when you reload the application.</p>"},{"location":"guide/user-guide.html#debugging-features","title":"\ud83d\udc1b Debugging Features","text":"<p>Rive Tester includes comprehensive debugging tools for developers and advanced users.</p>"},{"location":"guide/user-guide.html#global-access","title":"Global Access","text":"<p>Access the Rive instance globally for console debugging:</p> <pre><code>// Access the current Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Inspect artboards\nconsole.log(rive.artboardNames);\n\n// Access ViewModels\nconst vm = rive.viewModelInstance;\nconsole.log(vm.properties);\n</code></pre>"},{"location":"guide/user-guide.html#debug-logging","title":"Debug Logging","text":"<p>Modular logging system with configurable levels:</p> <pre><code>// Configure logging levels per module\nwindow.debugConfig = {\n    parser: \"debug\",\n    controls: \"info\",\n    layout: \"warn\",\n    rive: \"debug\",\n    ui: \"info\",\n};\nwindow.applyDebugConfig();\n</code></pre>"},{"location":"guide/user-guide.html#available-debug-modules","title":"Available Debug Modules","text":"<ul> <li><code>parser</code>: Rive file parsing and data extraction</li> <li><code>controls</code>: Dynamic control generation and updates</li> <li><code>layout</code>: Golden Layout system management</li> <li><code>rive</code>: Rive runtime interactions and events</li> <li><code>ui</code>: User interface updates and interactions</li> </ul> <p>Related: Debugging | Runtime Controls | Asset Manager</p>"}]}