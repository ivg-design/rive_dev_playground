{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Rive Tester Documentation","text":"<p>Interactive Rive File Parser &amp; Debugging Tool</p> <p>A comprehensive web-based tool for parsing, inspecting, and debugging Rive animation files. Load <code>.riv</code> files, explore their structure, test animations with dynamic controls, and analyze state machines and ViewModel properties.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li> <p>:material-rocket-launch: Launch Application</p> <p>Try the application immediately without any setup</p> <p>:octicons-arrow-right-24: Launch App</p> </li> <li> <p>:material-download: Local Development</p> <p>Set up the development environment on your machine</p> <p>:octicons-arrow-right-24: Installation Guide</p> </li> <li> <p>:material-book-open: User Guide</p> <p>Learn how to use all the features and panels</p> <p>:octicons-arrow-right-24: Read Guide</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#interactive-playground","title":"Interactive Playground","text":"<p>Load local <code>.riv</code> files with real-time animation playback and professional IDE-like interface with dockable panels.</p>"},{"location":"#deep-inspection","title":"Deep Inspection","text":"<p>Analyze artboards, state machines, ViewModels, and embedded assets with interactive tree views.</p>"},{"location":"#runtime-controls","title":"Runtime Controls","text":"<p>Auto-generated UI controls for ViewModel properties, state machine inputs, and animation playback.</p>"},{"location":"#asset-manager","title":"Asset Manager","text":"<p>View, inspect, and replace embedded assets (images, fonts) with local files or URLs in real-time.</p>"},{"location":"#debugging-tools","title":"Debugging Tools","text":"<p>Global runtime access, modular logging system, and comprehensive error handling.</p>"},{"location":"#modern-ui","title":"Modern UI","text":"<p>Dark theme, responsive design, and modular CSS architecture for professional workflow.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Quick Start - Get up and running in minutes</li> <li>Installation - Set up your development environment</li> <li>First Steps - Your first Rive file analysis</li> </ul>"},{"location":"#user-guide","title":"User Guide","text":"<ul> <li>Interface Overview - Understanding the layout and panels</li> <li>Loading Files - How to load and parse Rive files</li> <li>Controls Panel - File management and playback controls</li> <li>Canvas Panel - Animation preview and interaction</li> <li>JSON Inspector - Exploring Rive file structure</li> <li>Dynamic Controls - Interactive property controls</li> <li>Asset Manager - Managing embedded assets</li> <li>Layout Management - Customizing the interface</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Debugging - Debug tools and techniques</li> <li>Runtime Controls - Advanced control features</li> <li>Keyboard Shortcuts - Speed up your workflow</li> <li>Global Access - Console debugging and API access</li> </ul>"},{"location":"#development","title":"Development","text":"<ul> <li>Architecture - Technical architecture overview</li> <li>CSS Guide - Styling and theming</li> <li>API Reference - Complete API documentation</li> <li>Contributing - How to contribute to the project</li> </ul>"},{"location":"#technical-stack","title":"Technical Stack","text":"Component Description @rive-app/webgl2 Official Rive WebGL2 runtime Golden Layout Professional dockable panel system JSONEditor Interactive JSON tree viewer Modular CSS Maintainable styling architecture"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>:octicons-rocket-24: Launch Application</li> <li>:octicons-mark-github-24: GitHub Repository</li> <li>:octicons-globe-24: Rive.app</li> <li>:octicons-people-24: Rive Community</li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<ul> <li>Rive Team - For the Rive runtime and tools</li> <li>JSONEditor - For the JSON viewing component  </li> <li>Golden Layout - For the layout system</li> </ul> <p>Built with  by IVG Design for the Rive community </p>"},{"location":"advanced/debugging/","title":"\ud83d\udc1b Debugging Guide","text":"<p>Comprehensive debugging tools and techniques for Rive Playground</p> <p>This guide covers all debugging features, tools, and techniques available in the Rive Playground, including global runtime access, modular logging, and advanced debugging strategies.</p>"},{"location":"advanced/debugging/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>\ud83c\udf10 Global Runtime Access</li> <li>\ud83d\udcca Debug Logging System</li> <li>\ud83d\udd0d Inspection Tools</li> <li>\u26a0\ufe0f Error Handling</li> <li>\ud83c\udf9b\ufe0f Runtime Controls</li> <li>\ud83d\udcc8 Performance Monitoring</li> <li>\ud83e\uddea Testing &amp; Validation</li> </ul>"},{"location":"advanced/debugging/#global-runtime-access","title":"\ud83c\udf10 Global Runtime Access","text":"<p>The Rive Playground exposes the current Rive instance globally for advanced debugging and runtime inspection.</p>"},{"location":"advanced/debugging/#windowriveinstanceglobal","title":"<code>window.riveInstanceGlobal</code>","text":"<p>Access the current Rive instance from the browser console:</p> <pre><code>// Get the global Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Check if instance is available\nif (rive) {\n  console.log('Rive instance is loaded and ready');\n} else {\n  console.log('No Rive instance currently loaded');\n}\n</code></pre>"},{"location":"advanced/debugging/#artboard-inspection","title":"Artboard Inspection","text":"<pre><code>// Get all artboard names\nconsole.log('Artboards:', rive.artboardNames);\n\n// Get current artboard\nconsole.log('Current artboard:', rive.artboard?.name);\n\n// Switch to different artboard\nrive.artboard = rive.artboardByName('ArtboardName');\n\n// Get artboard dimensions\nconsole.log('Artboard size:', {\n  width: rive.artboard?.width,\n  height: rive.artboard?.height\n});\n</code></pre>"},{"location":"advanced/debugging/#animation-control","title":"Animation Control","text":"<pre><code>// Get all animations\nconsole.log('Animations:', rive.animationNames);\n\n// Control timeline playback\nconst timeline = rive.animationByName('AnimationName');\nif (timeline) {\n  timeline.time = 0;        // Reset to start\n  timeline.speed = 0.5;     // Half speed\n  timeline.loopValue = 1;   // Loop once\n}\n\n// Get animation properties\nconsole.log('Animation info:', {\n  name: timeline.name,\n  duration: timeline.duration,\n  fps: timeline.fps,\n  workStart: timeline.workStart,\n  workEnd: timeline.workEnd\n});\n</code></pre>"},{"location":"advanced/debugging/#state-machine-debugging","title":"State Machine Debugging","text":"<pre><code>// Get all state machines\nconsole.log('State Machines:', rive.stateMachineNames);\n\n// Get state machine inputs\nconst smInputs = rive.stateMachineInputs('StateMachineName');\nsmInputs.forEach(input =&gt; {\n  console.log(`Input: ${input.name}`, {\n    type: input.type,\n    value: input.value,\n    isBoolean: input.asBool !== undefined,\n    isNumber: input.asNumber !== undefined,\n    isTrigger: input.asTrigger !== undefined\n  });\n});\n\n// Modify state machine inputs\nconst boolInput = rive.getBooleanInput('InputName');\nif (boolInput) {\n  boolInput.value = true;\n}\n\nconst numberInput = rive.getNumberInput('InputName');\nif (numberInput) {\n  numberInput.value = 42;\n}\n\n// Trigger events\nconst triggerInput = rive.getTriggerInput('InputName');\nif (triggerInput) {\n  triggerInput.fire();\n}\n</code></pre>"},{"location":"advanced/debugging/#viewmodel-inspection","title":"ViewModel Inspection","text":"<pre><code>// Get the main ViewModel instance\nconst vm = rive.viewModelInstance;\n\n// Inspect ViewModel properties\nconsole.log('ViewModel properties:', vm.properties);\n\n// Access nested ViewModels\nvm.properties\n  .filter(p =&gt; p.type === 'viewModel')\n  .forEach(p =&gt; {\n    const nestedVM = vm.viewModel(p.name);\n    console.log(`Nested VM: ${p.name}`, nestedVM);\n  });\n\n// Get string properties\ntry {\n  const stringInputs = vm.strings();\n  stringInputs.forEach(name =&gt; {\n    const stringInput = vm.string(name);\n    console.log(`String: ${name} = \"${stringInput.value}\"`);\n  });\n} catch (e) {\n  console.log('No string properties available');\n}\n\n// Get color properties\ntry {\n  const colorInputs = vm.colors();\n  colorInputs.forEach(name =&gt; {\n    const colorInput = vm.color(name);\n    console.log(`Color: ${name} = ${colorInput.value} (${argbToHex(colorInput.value)})`);\n  });\n} catch (e) {\n  console.log('No color properties available');\n}\n\n// Get enum properties\ntry {\n  const enumInputs = vm.enums();\n  enumInputs.forEach(name =&gt; {\n    const enumInput = vm.enum(name);\n    console.log(`Enum: ${name} = \"${enumInput.value}\"`);\n  });\n} catch (e) {\n  console.log('No enum properties available');\n}\n</code></pre>"},{"location":"advanced/debugging/#asset-inspection","title":"Asset Inspection","text":"<pre><code>// Get all assets\nconst assets = rive.assets();\nconsole.log('Assets:', assets);\n\n// Filter by asset type\nconst imageAssets = assets.filter(asset =&gt; asset.isImage);\nconst fontAssets = assets.filter(asset =&gt; asset.isFont);\n\nconsole.log('Image assets:', imageAssets);\nconsole.log('Font assets:', fontAssets);\n\n// Get asset details\nimageAssets.forEach(asset =&gt; {\n  console.log(`Image: ${asset.name}`, {\n    uniqueId: asset.uniqueId,\n    cdnUuid: asset.cdnUuid,\n    fileExtension: asset.fileExtension\n  });\n});\n</code></pre>"},{"location":"advanced/debugging/#utility-functions","title":"Utility Functions","text":"<pre><code>// Color conversion helper\nfunction argbToHex(argb) {\n  if (typeof argb !== 'number') return '#000000';\n  const hex = (argb &amp; 0xffffff).toString(16).padStart(6, '0').toUpperCase();\n  return `#${hex}`;\n}\n\n// Hex to ARGB conversion\nfunction hexToArgb(hex) {\n  const cleanHex = hex.replace('#', '');\n  return parseInt(`FF${cleanHex}`, 16);\n}\n\n// Get all controllable properties\nfunction getAllControllableProperties() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return null;\n\n  const properties = {\n    stateMachines: {},\n    viewModels: {},\n    assets: []\n  };\n\n  // State machine inputs\n  rive.stateMachineNames.forEach(smName =&gt; {\n    properties.stateMachines[smName] = rive.stateMachineInputs(smName);\n  });\n\n  // ViewModel properties\n  const vm = rive.viewModelInstance;\n  if (vm) {\n    properties.viewModels.main = {\n      strings: vm.strings?.() || [],\n      colors: vm.colors?.() || [],\n      enums: vm.enums?.() || [],\n      numbers: vm.numbers?.() || [],\n      booleans: vm.booleans?.() || []\n    };\n  }\n\n  // Assets\n  properties.assets = rive.assets();\n\n  return properties;\n}\n\n// Usage\nconsole.log('All controllable properties:', getAllControllableProperties());\n</code></pre>"},{"location":"advanced/debugging/#debug-logging-system","title":"\ud83d\udcca Debug Logging System","text":"<p>The Rive Playground includes a modular debug logging system with configurable levels per module.</p>"},{"location":"advanced/debugging/#debug-levels","title":"Debug Levels","text":"<ul> <li><code>error</code>: Only error messages</li> <li><code>warn</code>: Warnings and errors</li> <li><code>info</code>: Informational messages, warnings, and errors</li> <li><code>debug</code>: All messages including detailed debug information</li> </ul>"},{"location":"advanced/debugging/#configuration","title":"Configuration","text":"<pre><code>// Set debug levels for specific modules\nwindow.debugConfig = {\n  parser: 'debug',        // Detailed parsing information\n  controls: 'info',       // Control generation and updates\n  layout: 'warn',         // Layout system warnings\n  rive: 'debug',          // Rive runtime interactions\n  ui: 'info'              // UI component updates\n};\n\n// Apply configuration\nwindow.applyDebugConfig();\n</code></pre>"},{"location":"advanced/debugging/#available-debug-modules","title":"Available Debug Modules","text":"Module Description <code>parser</code> Rive file parsing and data extraction <code>controls</code> Dynamic control generation and updates <code>layout</code> Golden Layout system management <code>rive</code> Rive runtime interactions and events <code>ui</code> User interface updates and interactions <code>state</code> Application state management <code>performance</code> Performance monitoring and metrics"},{"location":"advanced/debugging/#debug-functions","title":"Debug Functions","text":"<pre><code>// View current debug settings\nconsole.log(window.getDebugSettings());\n\n// Save current settings to localStorage\nwindow.saveDebugSettings();\n\n// Load saved settings from localStorage\nwindow.loadDebugSettings();\n\n// Clear all debug settings\nwindow.clearDebugSettings();\n\n// Reset to default settings\nwindow.resetDebugSettings();\n\n// Enable debug mode for all modules\nwindow.enableAllDebug();\n\n// Disable debug mode for all modules\nwindow.disableAllDebug();\n</code></pre>"},{"location":"advanced/debugging/#custom-debug-messages","title":"Custom Debug Messages","text":"<pre><code>// Use the debug logger in your code\nconst logger = window.getDebugLogger('myModule');\n\nlogger.debug('Detailed debug information');\nlogger.info('General information');\nlogger.warn('Warning message');\nlogger.error('Error message');\n\n// With context data\nlogger.debug('Processing data', { data: someObject });\nlogger.info('Operation completed', { duration: '150ms' });\n</code></pre>"},{"location":"advanced/debugging/#inspection-tools","title":"\ud83d\udd0d Inspection Tools","text":""},{"location":"advanced/debugging/#json-inspector","title":"JSON Inspector","text":"<p>The built-in JSON inspector provides detailed views of parsed Rive data:</p> <pre><code>// Access the JSON editor instance\nconst jsonEditor = window.jsonEditorInstance;\n\n// Get current data\nconst currentData = jsonEditor.get();\n\n// Search for specific values\njsonEditor.search('searchTerm');\n\n// Expand/collapse all nodes\njsonEditor.expandAll();\njsonEditor.collapseAll();\n\n// Switch view modes\njsonEditor.setMode('tree');    // Tree view\njsonEditor.setMode('code');    // Code view\njsonEditor.setMode('text');    // Text view\n</code></pre>"},{"location":"advanced/debugging/#data-extraction","title":"Data Extraction","text":"<pre><code>// Extract specific data from parsed results\nfunction extractAnimationData() {\n  const data = window.jsonEditorInstance?.get();\n  if (!data || !data.artboards) return null;\n\n  return data.artboards.map(artboard =&gt; ({\n    name: artboard.name,\n    animations: artboard.animations.map(anim =&gt; ({\n      name: anim.name,\n      duration: anim.duration,\n      fps: anim.fps\n    }))\n  }));\n}\n\n// Extract ViewModel structure\nfunction extractViewModelStructure() {\n  const data = window.jsonEditorInstance?.get();\n  if (!data || !data.allViewModelDefinitionsAndInstances) return null;\n\n  return data.allViewModelDefinitionsAndInstances.map(vm =&gt; ({\n    name: vm.name,\n    properties: vm.properties,\n    instanceCount: vm.instanceCountFromDefinition\n  }));\n}\n</code></pre>"},{"location":"advanced/debugging/#error-handling","title":"\u26a0\ufe0f Error Handling","text":""},{"location":"advanced/debugging/#error-monitoring","title":"Error Monitoring","text":"<pre><code>// Monitor for Rive errors\nwindow.addEventListener('error', (event) =&gt; {\n  if (event.filename?.includes('rive')) {\n    console.error('Rive Runtime Error:', event.error);\n  }\n});\n\n// Monitor for unhandled promise rejections\nwindow.addEventListener('unhandledrejection', (event) =&gt; {\n  console.error('Unhandled Promise Rejection:', event.reason);\n});\n</code></pre>"},{"location":"advanced/debugging/#error-recovery","title":"Error Recovery","text":"<pre><code>// Attempt to recover from errors\nfunction attemptErrorRecovery() {\n  try {\n    // Clear current instance\n    if (window.riveInstanceGlobal) {\n      window.riveInstanceGlobal.cleanup?.();\n      window.riveInstanceGlobal = null;\n    }\n\n    // Reset application state\n    window.resetApplicationState?.();\n\n    // Reload the last file if available\n    const lastFile = localStorage.getItem('lastRiveFile');\n    if (lastFile) {\n      // Trigger file reload\n      console.log('Attempting to reload last file...');\n    }\n\n  } catch (e) {\n    console.error('Error recovery failed:', e);\n  }\n}\n</code></pre>"},{"location":"advanced/debugging/#validation-functions","title":"Validation Functions","text":"<pre><code>// Validate Rive instance\nfunction validateRiveInstance() {\n  const rive = window.riveInstanceGlobal;\n\n  const checks = {\n    instanceExists: !!rive,\n    hasArtboard: !!rive?.artboard,\n    hasCanvas: !!rive?.canvas,\n    isLoaded: rive?.isLoaded || false,\n    hasViewModels: !!rive?.viewModelInstance\n  };\n\n  console.log('Rive Instance Validation:', checks);\n  return Object.values(checks).every(Boolean);\n}\n\n// Validate file structure\nfunction validateFileStructure(data) {\n  const required = ['artboards', 'allViewModelDefinitionsAndInstances'];\n  const missing = required.filter(key =&gt; !data[key]);\n\n  if (missing.length &gt; 0) {\n    console.warn('Missing required data:', missing);\n    return false;\n  }\n\n  return true;\n}\n</code></pre>"},{"location":"advanced/debugging/#runtime-controls","title":"\ud83c\udf9b\ufe0f Runtime Controls","text":""},{"location":"advanced/debugging/#dynamic-control-testing","title":"Dynamic Control Testing","text":"<pre><code>// Test all dynamic controls\nfunction testAllControls() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return;\n\n  // Test state machine inputs\n  rive.stateMachineNames.forEach(smName =&gt; {\n    const inputs = rive.stateMachineInputs(smName);\n    inputs.forEach(input =&gt; {\n      console.log(`Testing ${smName}.${input.name}`);\n\n      if (input.asBool !== undefined) {\n        input.value = !input.value;\n        setTimeout(() =&gt; input.value = !input.value, 1000);\n      } else if (input.asNumber !== undefined) {\n        const original = input.value;\n        input.value = original + 10;\n        setTimeout(() =&gt; input.value = original, 1000);\n      } else if (input.asTrigger !== undefined) {\n        input.fire();\n      }\n    });\n  });\n}\n\n// Test ViewModel properties\nfunction testViewModelProperties() {\n  const vm = window.riveInstanceGlobal?.viewModelInstance;\n  if (!vm) return;\n\n  // Test string properties\n  try {\n    const strings = vm.strings();\n    strings.forEach(name =&gt; {\n      const input = vm.string(name);\n      const original = input.value;\n      input.value = `Test: ${Date.now()}`;\n      setTimeout(() =&gt; input.value = original, 2000);\n    });\n  } catch (e) {}\n\n  // Test color properties\n  try {\n    const colors = vm.colors();\n    colors.forEach(name =&gt; {\n      const input = vm.color(name);\n      const original = input.value;\n      input.value = 0xFF00FF00; // Green\n      setTimeout(() =&gt; input.value = original, 2000);\n    });\n  } catch (e) {}\n}\n</code></pre>"},{"location":"advanced/debugging/#performance-testing","title":"Performance Testing","text":"<pre><code>// Measure control update performance\nfunction measureControlPerformance() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return;\n\n  const startTime = performance.now();\n  let updateCount = 0;\n\n  // Rapid updates test\n  const interval = setInterval(() =&gt; {\n    const inputs = rive.stateMachineInputs(rive.stateMachineNames[0]);\n    if (inputs.length &gt; 0 &amp;&amp; inputs[0].asBool !== undefined) {\n      inputs[0].value = !inputs[0].value;\n      updateCount++;\n    }\n\n    if (updateCount &gt;= 100) {\n      clearInterval(interval);\n      const endTime = performance.now();\n      console.log(`100 updates completed in ${endTime - startTime}ms`);\n      console.log(`Average: ${(endTime - startTime) / 100}ms per update`);\n    }\n  }, 10);\n}\n</code></pre>"},{"location":"advanced/debugging/#performance-monitoring","title":"\ud83d\udcc8 Performance Monitoring","text":""},{"location":"advanced/debugging/#frame-rate-monitoring","title":"Frame Rate Monitoring","text":"<pre><code>// Monitor frame rate\nlet frameCount = 0;\nlet lastTime = performance.now();\n\nfunction monitorFrameRate() {\n  frameCount++;\n  const currentTime = performance.now();\n\n  if (currentTime - lastTime &gt;= 1000) {\n    console.log(`FPS: ${frameCount}`);\n    frameCount = 0;\n    lastTime = currentTime;\n  }\n\n  requestAnimationFrame(monitorFrameRate);\n}\n\n// Start monitoring\nmonitorFrameRate();\n</code></pre>"},{"location":"advanced/debugging/#memory-usage","title":"Memory Usage","text":"<pre><code>// Monitor memory usage (Chrome only)\nfunction monitorMemory() {\n  if (performance.memory) {\n    const memory = performance.memory;\n    console.log('Memory Usage:', {\n      used: `${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n      total: `${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,\n      limit: `${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`\n    });\n  }\n}\n\n// Monitor every 5 seconds\nsetInterval(monitorMemory, 5000);\n</code></pre>"},{"location":"advanced/debugging/#load-time-tracking","title":"Load Time Tracking","text":"<pre><code>// Track file load times\nconst loadTimes = {\n  fileSelect: 0,\n  riveLoad: 0,\n  parseComplete: 0,\n  uiReady: 0\n};\n\n// Use in your code\nloadTimes.fileSelect = performance.now();\n// ... file loading code ...\nloadTimes.riveLoad = performance.now();\n// ... parsing code ...\nloadTimes.parseComplete = performance.now();\n// ... UI updates ...\nloadTimes.uiReady = performance.now();\n\nconsole.log('Load Performance:', {\n  fileToRive: `${loadTimes.riveLoad - loadTimes.fileSelect}ms`,\n  riveToParse: `${loadTimes.parseComplete - loadTimes.riveLoad}ms`,\n  parseToUI: `${loadTimes.uiReady - loadTimes.parseComplete}ms`,\n  total: `${loadTimes.uiReady - loadTimes.fileSelect}ms`\n});\n</code></pre>"},{"location":"advanced/debugging/#testing-validation","title":"\ud83e\uddea Testing &amp; Validation","text":""},{"location":"advanced/debugging/#automated-testing","title":"Automated Testing","text":"<pre><code>// Run comprehensive tests\nfunction runDiagnostics() {\n  console.log('\ud83e\uddea Running Rive Playground Diagnostics...');\n\n  const results = {\n    riveInstance: validateRiveInstance(),\n    debugSystem: testDebugSystem(),\n    controls: testControlSystem(),\n    performance: measureBasicPerformance()\n  };\n\n  console.log('\ud83d\udcca Diagnostic Results:', results);\n  return results;\n}\n\nfunction testDebugSystem() {\n  try {\n    const originalConfig = window.getDebugSettings();\n    window.debugConfig = { test: 'debug' };\n    window.applyDebugConfig();\n    const newConfig = window.getDebugSettings();\n    window.debugConfig = originalConfig;\n    window.applyDebugConfig();\n    return newConfig.test === 'debug';\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction testControlSystem() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return false;\n\n  try {\n    const smCount = rive.stateMachineNames.length;\n    const vmExists = !!rive.viewModelInstance;\n    const assetsCount = rive.assets().length;\n\n    return smCount &gt;= 0 &amp;&amp; vmExists !== undefined &amp;&amp; assetsCount &gt;= 0;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction measureBasicPerformance() {\n  const start = performance.now();\n\n  // Simulate some operations\n  for (let i = 0; i &lt; 1000; i++) {\n    Math.random();\n  }\n\n  const end = performance.now();\n  return end - start &lt; 10; // Should complete in under 10ms\n}\n</code></pre>"},{"location":"advanced/debugging/#debug-shortcuts","title":"Debug Shortcuts","text":"<p>Add these to your browser console for quick debugging:</p> <pre><code>// Quick debug shortcuts\nwindow.debug = {\n  // Quick access to common objects\n  rive: () =&gt; window.riveInstanceGlobal,\n  data: () =&gt; window.jsonEditorInstance?.get(),\n\n  // Quick tests\n  test: () =&gt; runDiagnostics(),\n  validate: () =&gt; validateRiveInstance(),\n\n  // Quick controls\n  play: () =&gt; window.riveInstanceGlobal?.play(),\n  pause: () =&gt; window.riveInstanceGlobal?.pause(),\n  reset: () =&gt; window.riveInstanceGlobal?.reset(),\n\n  // Quick info\n  info: () =&gt; {\n    const rive = window.riveInstanceGlobal;\n    if (!rive) return 'No Rive instance loaded';\n\n    return {\n      artboards: rive.artboardNames,\n      animations: rive.animationNames,\n      stateMachines: rive.stateMachineNames,\n      currentArtboard: rive.artboard?.name\n    };\n  }\n};\n\n// Usage examples:\n// debug.rive()     - Get Rive instance\n// debug.test()     - Run diagnostics\n// debug.info()     - Get quick info\n// debug.play()     - Start playback\n</code></pre>"},{"location":"advanced/debugging/#advanced-debugging-techniques","title":"\ud83d\udd27 Advanced Debugging Techniques","text":""},{"location":"advanced/debugging/#custom-event-monitoring","title":"Custom Event Monitoring","text":"<pre><code>// Monitor all Rive events\nfunction monitorRiveEvents() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return;\n\n  // Monitor state changes\n  rive.on('statechange', (event) =&gt; {\n    console.log('State Change:', event);\n  });\n\n  // Monitor Rive events\n  rive.on('riveevent', (event) =&gt; {\n    console.log('Rive Event:', event.data);\n  });\n\n  // Monitor load events\n  rive.on('load', () =&gt; {\n    console.log('Rive loaded successfully');\n  });\n\n  // Monitor error events\n  rive.on('loaderror', (error) =&gt; {\n    console.error('Rive load error:', error);\n  });\n}\n</code></pre>"},{"location":"advanced/debugging/#state-snapshots","title":"State Snapshots","text":"<pre><code>// Create state snapshots for debugging\nfunction createStateSnapshot() {\n  const rive = window.riveInstanceGlobal;\n  if (!rive) return null;\n\n  const snapshot = {\n    timestamp: Date.now(),\n    artboard: rive.artboard?.name,\n    animations: rive.animationNames.map(name =&gt; {\n      const anim = rive.animationByName(name);\n      return {\n        name,\n        time: anim?.time,\n        speed: anim?.speed,\n        isPlaying: anim?.isPlaying\n      };\n    }),\n    stateMachines: rive.stateMachineNames.map(name =&gt; {\n      const inputs = rive.stateMachineInputs(name);\n      return {\n        name,\n        inputs: inputs.map(input =&gt; ({\n          name: input.name,\n          value: input.value,\n          type: input.type\n        }))\n      };\n    })\n  };\n\n  console.log('State Snapshot:', snapshot);\n  return snapshot;\n}\n\n// Compare snapshots\nfunction compareSnapshots(snapshot1, snapshot2) {\n  const differences = [];\n\n  // Compare animations\n  snapshot1.animations.forEach((anim1, index) =&gt; {\n    const anim2 = snapshot2.animations[index];\n    if (anim1.time !== anim2.time) {\n      differences.push(`Animation ${anim1.name} time: ${anim1.time} \u2192 ${anim2.time}`);\n    }\n  });\n\n  // Compare state machine inputs\n  snapshot1.stateMachines.forEach((sm1, smIndex) =&gt; {\n    const sm2 = snapshot2.stateMachines[smIndex];\n    sm1.inputs.forEach((input1, inputIndex) =&gt; {\n      const input2 = sm2.inputs[inputIndex];\n      if (input1.value !== input2.value) {\n        differences.push(`SM ${sm1.name}.${input1.name}: ${input1.value} \u2192 ${input2.value}`);\n      }\n    });\n  });\n\n  return differences;\n}\n</code></pre> <p>This debugging guide provides comprehensive tools and techniques for troubleshooting and optimizing your Rive Playground experience. Use these tools to understand how your animations work, identify performance issues, and debug complex interactions. </p>"},{"location":"advanced/runtime-controls/","title":"\ud83c\udfae Runtime Controls Guide","text":"<p>Comprehensive guide to controlling Rive animations at runtime</p> <p>This guide covers the runtime control system that allows you to dynamically control Rive animations programmatically without requiring UI controls.</p>"},{"location":"advanced/runtime-controls/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>\ud83c\udfaf Overview</li> <li>\ud83d\ude80 Basic Setup</li> <li>\ud83c\udf9b\ufe0f Control System</li> <li>\ud83d\udd27 API Reference</li> <li>\ud83d\udca1 Examples</li> <li>\ud83c\udfa8 Advanced Techniques</li> </ul>"},{"location":"advanced/runtime-controls/#overview","title":"\ud83c\udfaf Overview","text":"<p>The runtime control system provides a streamlined way to control Rive animations programmatically, allowing you to:</p> <ul> <li>Toggle state machine inputs: Boolean, number, and trigger inputs</li> <li>Update text content: Dynamic string properties in ViewModels</li> <li>Change colors: Real-time color property updates</li> <li>Select enum values: Dropdown-style enum property control</li> <li>Swap images at runtime: Dynamic image asset replacement</li> <li>Listen for animation events: React to Rive events and state changes</li> </ul>"},{"location":"advanced/runtime-controls/#basic-setup","title":"\ud83d\ude80 Basic Setup","text":""},{"location":"advanced/runtime-controls/#initialize-rive-instance","title":"Initialize Rive Instance","text":"<pre><code>const rive = require(\"@rive-app/webgl2\");\n\n// Initialize Rive with event handling\nconst riveInstance = new rive.Rive({\n  src: \"your-animation.riv\",\n  artboard: \"YourArtboard\",\n  stateMachines: \"Your State Machine\",\n  canvas: document.getElementById(\"rive-canvas\"),\n  autoplay: true,\n  autoBind: true,\n  onStateChange: (stateMachine, state) =&gt; {\n    console.log(`State changed: ${stateMachine} -&gt; ${state}`);\n  },\n  onLoad() {\n    riveInstance.resizeDrawingSurfaceToCanvas();\n    // Initialize your controls after load\n    initializeControls();\n  }\n});\n\n// Handle window resizing\nwindow.addEventListener(\"resize\", () =&gt; riveInstance.resizeDrawingSurfaceToCanvas());\n</code></pre>"},{"location":"advanced/runtime-controls/#control-object-structure","title":"Control Object Structure","text":"<p>Create a control object that represents all modifiable properties:</p> <pre><code>const riveControls = {\n  stateMachines: {\n    \"State Machine 1\": {\n      inputs: {\n        \"Diagram Enter\": false,\n        \"Speed\": 1.0,\n        \"Reset\": null  // trigger\n      }\n    }\n  },\n  viewModels: {\n    \"pill_1\": {\n      \"Button Label\": \"Click Me\",\n      \"Label Color\": 0xFFFFFFFF\n    },\n    \"popup_1\": {\n      \"Image Picker\": \"image1\",\n      \"Title\": \"Hello World\",\n      \"Content\": \"This is some content\"\n    }\n  },\n  imageAssets: {\n    \"background\": \"https://example.com/new-background.png\"\n  }\n}\n</code></pre>"},{"location":"advanced/runtime-controls/#control-system","title":"\ud83c\udf9b\ufe0f Control System","text":""},{"location":"advanced/runtime-controls/#initialize-controls","title":"Initialize Controls","text":"<p>After the Rive instance loads, initialize your control system:</p> <pre><code>function initializeControls() {\n  // Get the diagram view model\n  const diagramVM = riveInstance.viewModelInstance;\n\n  // Map all available properties for programmatic control\n  const controlMap = buildControlMap(riveInstance, diagramVM);\n\n  // Apply initial values if needed\n  applyControls(controlMap, riveControls);\n\n  // Now you can update controls programmatically\n  // Example: updateControl(controlMap, \"pill_1.Button Label\", \"New Label\");\n}\n</code></pre>"},{"location":"advanced/runtime-controls/#building-the-control-map","title":"Building the Control Map","text":"<p>Create a map of all controllable properties:</p> <pre><code>function buildControlMap(riveInst, diagramVM) {\n  const controlMap = {\n    stateMachineInputs: {},\n    viewModels: {},\n    imageAssets: {}\n  };\n\n  // Map state machine inputs\n  riveInst.stateMachineNames.forEach(smName =&gt; {\n    controlMap.stateMachineInputs[smName] = {};\n    riveInst.stateMachineInputs(smName).forEach(input =&gt; {\n      controlMap.stateMachineInputs[smName][input.name] = input;\n    });\n  });\n\n  // Map view model properties\n  diagramVM.properties\n    .filter(p =&gt; p.type === \"viewModel\")\n    .forEach(p =&gt; {\n      const vm = diagramVM.viewModel(p.name);\n      controlMap.viewModels[p.name] = {};\n\n      // Try to map string properties\n      try {\n        const stringInputs = vm.strings();\n        stringInputs.forEach(name =&gt; {\n          controlMap.viewModels[p.name][name] = vm.string(name);\n        });\n      } catch (_e) {}\n\n      // Try to map color properties\n      try {\n        const colorInputs = vm.colors();\n        colorInputs.forEach(name =&gt; {\n          controlMap.viewModels[p.name][name] = vm.color(name);\n        });\n      } catch (_e) {}\n\n      // Try to map enum properties\n      try {\n        const enumInputs = vm.enums();\n        enumInputs.forEach(name =&gt; {\n          controlMap.viewModels[p.name][name] = vm.enum(name);\n        });\n      } catch (_e) {}\n    });\n\n  // Map image assets\n  riveInst.assets().forEach(asset =&gt; {\n    if (asset.isImage) {\n      controlMap.imageAssets[asset.name] = asset;\n    }\n  });\n\n  return controlMap;\n}\n</code></pre>"},{"location":"advanced/runtime-controls/#updating-controls","title":"Updating Controls","text":"<p>Update any property at runtime:</p> <pre><code>function updateControl(controlMap, path, value) {\n  const parts = path.split('.');\n\n  // Handle state machine inputs\n  if (parts[0] === \"stateMachines\") {\n    const smName = parts[1];\n    const inputName = parts[2];\n    controlMap.stateMachineInputs[smName][inputName].value = value;\n    return true;\n  }\n\n  // Handle view model properties\n  if (parts[0] === \"viewModels\") {\n    const vmName = parts[1];\n    const propName = parts[2];\n    const prop = controlMap.viewModels[vmName][propName];\n\n    // Handle different property types\n    if (typeof value === \"string\" &amp;&amp; prop.type === \"string\") {\n      prop.value = value.replace(/\\n/g, \"\\\\n\");\n    } else if (typeof value === \"string\" &amp;&amp; prop.type === \"enum\") {\n      prop.value = value;\n    } else if (typeof value === \"number\" &amp;&amp; prop.type === \"color\") {\n      prop.value = value; // Expecting ARGB format (0xFFFFFFFF)\n    }\n    return true;\n  }\n\n  // Handle image assets\n  if (parts[0] === \"imageAssets\") {\n    const assetName = parts[1];\n    substituteImage(controlMap.imageAssets[assetName], value);\n    return true;\n  }\n\n  return false;\n}\n\n// Apply all controls at once\nfunction applyControls(controlMap, controlValues) {\n  // Apply state machine inputs\n  Object.entries(controlValues.stateMachines || {}).forEach(([smName, inputs]) =&gt; {\n    Object.entries(inputs.inputs || {}).forEach(([inputName, value]) =&gt; {\n      updateControl(controlMap, `stateMachines.${smName}.${inputName}`, value);\n    });\n  });\n\n  // Apply view model properties\n  Object.entries(controlValues.viewModels || {}).forEach(([vmName, props]) =&gt; {\n    Object.entries(props).forEach(([propName, value]) =&gt; {\n      updateControl(controlMap, `viewModels.${vmName}.${propName}`, value);\n    });\n  });\n\n  // Apply image assets\n  Object.entries(controlValues.imageAssets || {}).forEach(([assetName, url]) =&gt; {\n    updateControl(controlMap, `imageAssets.${assetName}`, url);\n  });\n}\n</code></pre>"},{"location":"advanced/runtime-controls/#api-reference","title":"\ud83d\udd27 API Reference","text":""},{"location":"advanced/runtime-controls/#rive-instance-methods","title":"Rive Instance Methods","text":"Method Description Returns <code>stateMachineNames</code> Get all state machine names <code>string[]</code> <code>stateMachineInputs(name)</code> Get inputs for a specific state machine <code>Input[]</code> <code>viewModelInstance</code> Get the root view model <code>ViewModelInstance</code> <code>assets()</code> Get all assets in the Rive file <code>Asset[]</code> <code>enums()</code> Get all enum definitions <code>Enum[]</code> <code>on(eventType, callback)</code> Listen for events <code>void</code>"},{"location":"advanced/runtime-controls/#control-path-format","title":"Control Path Format","text":"<ul> <li>State machine inputs: <code>stateMachines.{MACHINE_NAME}.{INPUT_NAME}</code></li> <li>View model properties: <code>viewModels.{MODEL_NAME}.{PROPERTY_NAME}</code></li> <li>Image assets: <code>imageAssets.{ASSET_NAME}</code></li> </ul>"},{"location":"advanced/runtime-controls/#input-types","title":"Input Types","text":"Type Description Value Format <code>Boolean</code> True/false toggle <code>true</code> or <code>false</code> <code>Number</code> Numeric value Any number <code>Trigger</code> One-time event Call <code>.fire()</code> method <code>String</code> Text content Any string <code>Color</code> ARGB color value <code>0xFFRRGGBB</code> format <code>Enum</code> Predefined options String matching enum value"},{"location":"advanced/runtime-controls/#examples","title":"\ud83d\udca1 Examples","text":""},{"location":"advanced/runtime-controls/#basic-state-machine-control","title":"Basic State Machine Control","text":"<pre><code>// Toggle a boolean input\nupdateControl(controlMap, \"stateMachines.MainSM.isVisible\", true);\n\n// Set a number input\nupdateControl(controlMap, \"stateMachines.MainSM.speed\", 2.5);\n\n// Fire a trigger\nconst triggerInput = controlMap.stateMachineInputs[\"MainSM\"][\"reset\"];\ntriggerInput.fire();\n</code></pre>"},{"location":"advanced/runtime-controls/#viewmodel-property-updates","title":"ViewModel Property Updates","text":"<pre><code>// Update text content\nupdateControl(controlMap, \"viewModels.textBox.content\", \"New text content\");\n\n// Change color (ARGB format)\nupdateControl(controlMap, \"viewModels.button.backgroundColor\", 0xFF00FF00); // Green\n\n// Set enum value\nupdateControl(controlMap, \"viewModels.dropdown.selectedOption\", \"option2\");\n</code></pre>"},{"location":"advanced/runtime-controls/#image-swapping","title":"Image Swapping","text":"<pre><code>function substituteImage(asset, url) {\n  if (!asset || !url) return;\n\n  fetch(url)\n    .then(r =&gt; r.arrayBuffer())\n    .then(buf =&gt; rive.decodeImage(new Uint8Array(buf)))\n    .then(img =&gt; {\n      asset.setRenderImage(img);\n      img.unref();\n    })\n    .catch(e =&gt; console.error(\"Image decode error\", e));\n}\n\n// Usage\nupdateControl(controlMap, \"imageAssets.background\", \"https://example.com/new-bg.png\");\n</code></pre>"},{"location":"advanced/runtime-controls/#event-listening","title":"Event Listening","text":"<pre><code>// Listen for Rive events\nriveInstance.on(rive.EventType.RiveEvent, (e) =&gt; {\n  const data = e.data || {};\n\n  if (data.type === rive.RiveEventType.General) {\n    console.log(`Rive Event: ${data.name}`);\n    // Trigger your custom handlers here\n  } \n  else if (data.type === rive.RiveEventType.OpenUrl) {\n    console.log(`OpenUrl Event: ${data.url}`);\n    // Handle URL opening\n  }\n});\n\n// Listen for state changes\nfunction handleStateChange(stateMachine, state) {\n  console.log(`State Change: ${stateMachine} -&gt; ${state}`);\n  // Add your custom state change handlers here\n}\n</code></pre>"},{"location":"advanced/runtime-controls/#advanced-techniques","title":"\ud83c\udfa8 Advanced Techniques","text":""},{"location":"advanced/runtime-controls/#color-conversion-helpers","title":"Color Conversion Helpers","text":"<pre><code>// Convert ARGB integer to hex string\nfunction argbToHex(argb) {\n  return \"#\" + (argb &amp; 0xffffff).toString(16).padStart(6, \"0\").toUpperCase();\n}\n\n// Convert hex string to ARGB integer\nfunction hexToArgb(hex) {\n  return parseInt(\"FF\" + hex.slice(1), 16);\n}\n\n// Usage\nconst redColor = hexToArgb(\"#FF0000\");\nupdateControl(controlMap, \"viewModels.button.color\", redColor);\n</code></pre>"},{"location":"advanced/runtime-controls/#batch-updates","title":"Batch Updates","text":"<pre><code>// Update multiple properties efficiently\nfunction batchUpdate(controlMap, updates) {\n  const startTime = performance.now();\n\n  updates.forEach(({ path, value }) =&gt; {\n    updateControl(controlMap, path, value);\n  });\n\n  const endTime = performance.now();\n  console.log(`Batch update completed in ${endTime - startTime}ms`);\n}\n\n// Usage\nbatchUpdate(controlMap, [\n  { path: \"viewModels.title.text\", value: \"New Title\" },\n  { path: \"viewModels.title.color\", value: 0xFF0000FF },\n  { path: \"stateMachines.MainSM.isActive\", value: true }\n]);\n</code></pre>"},{"location":"advanced/runtime-controls/#animation-sequences","title":"Animation Sequences","text":"<pre><code>// Create animated sequences\nfunction animateProperty(controlMap, path, startValue, endValue, duration) {\n  const startTime = performance.now();\n\n  function animate() {\n    const elapsed = performance.now() - startTime;\n    const progress = Math.min(elapsed / duration, 1);\n\n    // Linear interpolation\n    const currentValue = startValue + (endValue - startValue) * progress;\n    updateControl(controlMap, path, currentValue);\n\n    if (progress &lt; 1) {\n      requestAnimationFrame(animate);\n    }\n  }\n\n  animate();\n}\n\n// Usage\nanimateProperty(controlMap, \"stateMachines.MainSM.progress\", 0, 100, 2000); // 2 second animation\n</code></pre>"},{"location":"advanced/runtime-controls/#complete-usage-example","title":"Complete Usage Example","text":"<pre><code>// Initialize Rive\nconst riveCanvas = document.getElementById(\"rive-canvas\");\nconst riveInstance = new rive.Rive({\n  src: \"diagram.riv\",\n  artboard: \"Diagram\",\n  stateMachines: \"State Machine 1\",\n  canvas: riveCanvas,\n  autoplay: true,\n  autoBind: true,\n  onStateChange: handleStateChange,\n  onLoad() {\n    riveInstance.resizeDrawingSurfaceToCanvas();\n\n    // Initialize control system\n    const controlMap = buildControlMap(riveInstance, riveInstance.viewModelInstance);\n\n    // Update specific controls\n    updateControl(controlMap, \"viewModels.pill_1.Button Label\", \"Start\");\n    updateControl(controlMap, \"viewModels.pill_1.Label Color\", 0xFF00FF00); // Green\n    updateControl(controlMap, \"stateMachines.State Machine 1.Diagram Enter\", true);\n\n    // Or update all at once\n    applyControls(controlMap, {\n      viewModels: {\n        \"popup_1\": {\n          \"Title\": \"Welcome!\",\n          \"Content\": \"This is controlled programmatically\"\n        }\n      },\n      imageAssets: {\n        \"background\": \"https://example.com/background.png\"\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"advanced/runtime-controls/#tips-for-production-use","title":"\ud83d\udd27 Tips for Production Use","text":"<ol> <li>Cache the control map after building it to avoid rebuilding on every update</li> <li>Implement data validation before updating properties</li> <li>Set up error handling for missing properties or invalid values</li> <li>Create convenience methods for your specific animation's common operations</li> <li>Use debouncing for rapid updates to avoid performance issues</li> <li>Monitor performance with the built-in debugging tools</li> <li>Test thoroughly across different browsers and devices</li> </ol>"},{"location":"advanced/runtime-controls/#debugging-runtime-controls","title":"\ud83d\udc1b Debugging Runtime Controls","text":"<p>Use the global debugging features to troubleshoot control issues:</p> <pre><code>// Access global Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Inspect available controls\nconsole.log('Available controls:', getAllControllableProperties());\n\n// Test control updates\nfunction testControl(path, value) {\n  console.log(`Testing: ${path} = ${value}`);\n  const result = updateControl(controlMap, path, value);\n  console.log(`Result: ${result ? 'Success' : 'Failed'}`);\n}\n\n// Monitor control changes\nfunction monitorControls() {\n  const snapshot1 = createStateSnapshot();\n  setTimeout(() =&gt; {\n    const snapshot2 = createStateSnapshot();\n    const differences = compareSnapshots(snapshot1, snapshot2);\n    console.log('Control changes:', differences);\n  }, 1000);\n}\n</code></pre> <p>This runtime controls system provides powerful programmatic control over your Rive animations, enabling dynamic, interactive experiences without manual UI controls. </p>"},{"location":"deployment/deployment/","title":"Rive Tester - GitHub Pages Deployment","text":"<p>This document explains how the Rive Tester app is deployed to GitHub Pages and how to access it.</p>"},{"location":"deployment/deployment/#live-demo","title":"Live Demo","text":"<p>\ud83d\ude80 Access the live app: https://ivg-design.github.io/rive-tester/rive-tester/</p>"},{"location":"deployment/deployment/#deployment-structure","title":"Deployment Structure","text":"<p>The deployment creates the following structure:</p> <pre><code>https://ivg-design.github.io/rive-tester/\n\u251c\u2500\u2500 index.html                    # Landing page with tool links\n\u2514\u2500\u2500 rive-tester/                  # Rive Tester application\n    \u251c\u2500\u2500 index.html                # Main app interface\n    \u251c\u2500\u2500 style.css                 # App styling\n    \u251c\u2500\u2500 src/                      # Source code modules\n    \u251c\u2500\u2500 node_modules/             # Dependencies (Rive runtime, etc.)\n    \u251c\u2500\u2500 *.riv                     # Sample Rive files\n    \u2514\u2500\u2500 README.md                 # App documentation\n</code></pre>"},{"location":"deployment/deployment/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Automatic Deployment: The GitHub Actions workflow (<code>.github/workflows/deploy-rive-tester.yml</code>) automatically deploys the app when changes are pushed to the main branch.</p> </li> <li> <p>Dependencies: The workflow installs all npm dependencies including the Rive WebGL2 runtime, ensuring the app works in the browser environment.</p> </li> <li> <p>Static Hosting: All files are served statically from GitHub Pages, making the app accessible without a backend server.</p> </li> </ol>"},{"location":"deployment/deployment/#features-available-in-deployed-version","title":"Features Available in Deployed Version","text":"<p>\u2705 File Upload: Upload and parse local .riv files \u2705 Animation Playback: Control timeline and state machine animations \u2705 ViewModel Controls: Interactive controls for ViewModel properties \u2705 JSON Inspector: Detailed view of parsed Rive file structure \u2705 Debug System: Built-in debugging with persistent settings \u2705 Responsive Design: Works on desktop and mobile devices  </p>"},{"location":"deployment/deployment/#local-development-vs-deployed-version","title":"Local Development vs Deployed Version","text":"Feature Local Development Deployed Version File Access Direct file system Upload only Dependencies npm install required Pre-installed Hot Reload Available with dev server Static files Debugging Full console access Browser dev tools"},{"location":"deployment/deployment/#updating-the-deployment","title":"Updating the Deployment","text":"<p>To update the deployed version:</p> <ol> <li>Make changes to the code locally</li> <li>Test thoroughly using a local server</li> <li>Commit and push changes to the main branch</li> <li>GitHub Actions will automatically rebuild and deploy</li> </ol>"},{"location":"deployment/deployment/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/deployment/#app-not-loading","title":"App Not Loading","text":"<ul> <li>Check browser console for errors</li> <li>Ensure JavaScript is enabled</li> <li>Try a hard refresh (Ctrl+F5 or Cmd+Shift+R)</li> </ul>"},{"location":"deployment/deployment/#file-upload-issues","title":"File Upload Issues","text":"<ul> <li>Ensure the file is a valid .riv file</li> <li>Check file size (GitHub Pages has limits)</li> <li>Try with a different browser</li> </ul>"},{"location":"deployment/deployment/#animation-not-playing","title":"Animation Not Playing","text":"<ul> <li>Check that the Rive file contains animations</li> <li>Verify ViewModel properties are correctly configured</li> <li>Use the debug panel to inspect the loaded data</li> </ul>"},{"location":"deployment/deployment/#repository-structure","title":"Repository Structure","text":"<p>This deployment is part of the larger IVG Design tools ecosystem:</p> <ul> <li>Main Repository: Contains the Rive Tester source code</li> <li>CEP Documentation: Separate documentation site at <code>ivg-design.github.io/cep</code></li> <li>Landing Page: Unified access point for all tools</li> </ul>"},{"location":"deployment/deployment/#contributing","title":"Contributing","text":"<p>To contribute to the Rive Tester:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Test locally</li> <li>Submit a pull request</li> </ol> <p>The deployment will automatically update once changes are merged to main. </p>"},{"location":"deployment/github-pages/","title":"GitHub Pages Deployment Setup","text":"<p>This guide walks you through setting up GitHub Pages deployment for the Rive Tester app.</p>"},{"location":"deployment/github-pages/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub repository with the Rive Tester code</li> <li>GitHub Pages enabled for your repository</li> <li>Node.js and npm installed locally (for testing)</li> </ul>"},{"location":"deployment/github-pages/#step-1-enable-github-pages","title":"Step 1: Enable GitHub Pages","text":"<ol> <li>Go to your GitHub repository</li> <li>Click on Settings tab</li> <li>Scroll down to Pages section</li> <li>Under Source, select GitHub Actions</li> <li>Save the settings</li> </ol>"},{"location":"deployment/github-pages/#step-2-repository-setup","title":"Step 2: Repository Setup","text":"<p>The deployment workflow is already configured in <code>.github/workflows/deploy-rive-tester.yml</code>. This workflow will:</p> <ul> <li>\u2705 Automatically trigger on pushes to main/master branch</li> <li>\u2705 Install dependencies including Rive runtime</li> <li>\u2705 Copy all necessary files to deployment directory</li> <li>\u2705 Create a landing page with links to tools</li> <li>\u2705 Deploy to GitHub Pages</li> </ul>"},{"location":"deployment/github-pages/#step-3-test-locally-before-deployment","title":"Step 3: Test Locally Before Deployment","text":"<p>Before pushing to GitHub, test the deployment structure locally:</p> <pre><code># Run the deployment test script\nnpm run test-deployment\n\n# Start a local server to test\ncd _test-deployment\nnpx http-server -p 8080\n\n# Open http://localhost:8080 in your browser\n</code></pre> <p>This creates a local copy of exactly what will be deployed to GitHub Pages.</p>"},{"location":"deployment/github-pages/#step-4-deploy","title":"Step 4: Deploy","text":"<ol> <li> <p>Commit and push your changes: <pre><code>git add .\ngit commit -m \"Add GitHub Pages deployment\"\ngit push origin main\n</code></pre></p> </li> <li> <p>Monitor the deployment:</p> </li> <li>Go to your repository on GitHub</li> <li>Click the Actions tab</li> <li>Watch the \"Deploy Rive Tester to GitHub Pages\" workflow</li> <li> <p>Deployment typically takes 2-3 minutes</p> </li> <li> <p>Access your deployed app:</p> </li> <li>Your app will be available at: <code>https://[username].github.io/[repository-name]/rive-tester/</code></li> <li>The landing page will be at: <code>https://[username].github.io/[repository-name]/</code></li> </ol>"},{"location":"deployment/github-pages/#expected-url-structure","title":"Expected URL Structure","text":"<p>Based on your existing CEP documentation setup, the URLs will be:</p> <ul> <li>Landing Page: <code>https://ivg-design.github.io/rive-tester/</code></li> <li>Rive Tester App: <code>https://ivg-design.github.io/rive-tester/rive-tester/</code></li> <li>CEP Documentation: <code>https://ivg-design.github.io/cep/</code> (existing)</li> </ul>"},{"location":"deployment/github-pages/#deployment-structure","title":"Deployment Structure","text":"<pre><code>GitHub Pages Root\n\u251c\u2500\u2500 index.html                 # Landing page with tool links\n\u2514\u2500\u2500 rive-playground/          # Rive Playground application\n    \u251c\u2500\u2500 index.html            # Main app interface\n    \u251c\u2500\u2500 src/                  # Source modules\n    \u2502   \u251c\u2500\u2500 components/       # Core application components\n    \u2502   \u2502   \u251c\u2500\u2500 goldenLayoutManager.js\n    \u2502   \u2502   \u251c\u2500\u2500 parser.js\n    \u2502   \u2502   \u251c\u2500\u2500 riveParserHandler.js\n    \u2502   \u2502   \u251c\u2500\u2500 riveControlInterface.js\n    \u2502   \u2502   \u2514\u2500\u2500 dataToControlConnector.js\n    \u2502   \u251c\u2500\u2500 styles/           # CSS and styling\n    \u2502   \u2502   \u2514\u2500\u2500 style.css\n    \u2502   \u2514\u2500\u2500 utils/            # Utility functions and helpers\n    \u2502       \u2514\u2500\u2500 debugger/     # Debug logging system\n    \u251c\u2500\u2500 docs/                 # Documentation files\n    \u251c\u2500\u2500 node_modules/         # Dependencies (Rive runtime, etc.)\n    \u251c\u2500\u2500 *.riv                 # Sample Rive files\n    \u2514\u2500\u2500 README.md             # Documentation\n</code></pre>"},{"location":"deployment/github-pages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/github-pages/#deployment-fails","title":"Deployment Fails","text":"<ol> <li>Check the Actions log:</li> <li>Go to repository \u2192 Actions \u2192 Failed workflow</li> <li> <p>Click on the failed job to see error details</p> </li> <li> <p>Common issues:</p> </li> <li>Missing dependencies in package.json</li> <li>File path issues (ensure all paths are relative)</li> <li>Large file sizes (GitHub has limits)</li> </ol>"},{"location":"deployment/github-pages/#app-doesnt-load","title":"App Doesn't Load","text":"<ol> <li>Check browser console for errors</li> <li>Verify all dependencies are included:</li> <li>Rive runtime should be in node_modules</li> <li>JSONEditor should be available</li> <li> <p>All source files should be present</p> </li> <li> <p>Test locally first: <pre><code>npm run test-deployment\ncd _test-deployment\nnpx http-server -p 8080\n</code></pre></p> </li> </ol>"},{"location":"deployment/github-pages/#file-upload-issues","title":"File Upload Issues","text":"<ul> <li>GitHub Pages serves static files only</li> <li>File uploads work through browser File API</li> <li>No server-side processing available</li> </ul>"},{"location":"deployment/github-pages/#updating-the-deployment","title":"Updating the Deployment","text":"<p>To update the deployed version:</p> <ol> <li>Make changes locally</li> <li>Test with <code>npm run test-deployment</code></li> <li>Commit and push to main branch</li> <li>GitHub Actions will automatically redeploy</li> </ol>"},{"location":"deployment/github-pages/#integration-with-existing-cep-documentation","title":"Integration with Existing CEP Documentation","text":"<p>The deployment creates a unified landing page that links to both: - Your new Rive Tester app - Your existing CEP documentation site</p> <p>This provides a single entry point for all your development tools.</p>"},{"location":"deployment/github-pages/#security-considerations","title":"Security Considerations","text":"<ul> <li>All code runs client-side in the browser</li> <li>No sensitive data should be included in the repository</li> <li>File uploads are processed locally in the browser</li> <li>No server-side data storage or processing</li> </ul>"},{"location":"deployment/github-pages/#performance-optimization","title":"Performance Optimization","text":"<p>The deployment includes: - \u2705 Production-only npm dependencies - \u2705 Minified CSS and JS where possible - \u2705 Efficient file structure - \u2705 Static file serving from GitHub's CDN</p>"},{"location":"deployment/github-pages/#monitoring-and-analytics","title":"Monitoring and Analytics","text":"<p>Consider adding: - Google Analytics for usage tracking - Error monitoring (e.g., Sentry) - Performance monitoring</p> <p>Add these to the HTML files if needed for production use. </p>"},{"location":"guide/asset-manager/","title":"Asset Manager","text":"<p>The Asset Manager is a powerful feature that allows you to inspect and replace embedded assets in your Rive files in real-time.</p>"},{"location":"guide/asset-manager/#overview","title":"Overview","text":"<p>The Asset Manager panel displays all embedded assets found in your Rive file, including:</p> <ul> <li>Images (PNG, JPG, WebP, SVG)</li> <li>Fonts (TTF, OTF, WOFF, WOFF2)  </li> <li>Audio (MP3, WAV, OGG) - Future support</li> </ul>"},{"location":"guide/asset-manager/#asset-information","title":"Asset Information","text":"<p>Each asset displays comprehensive metadata:</p>"},{"location":"guide/asset-manager/#basic-information","title":"Basic Information","text":"<ul> <li>Asset Name - The original filename or identifier</li> <li>Asset Type - Image, Font, Audio, etc.</li> <li>File Extension - Original file format</li> <li>Status Indicator - Current state (embedded, replaced, error)</li> </ul>"},{"location":"guide/asset-manager/#technical-details","title":"Technical Details","text":"<ul> <li>Asset ID - Unique identifier within the Rive file</li> <li>CDN UUID - Content delivery network identifier (if applicable)</li> <li>Replacement Status - Shows if asset has been modified</li> </ul>"},{"location":"guide/asset-manager/#asset-replacement","title":"Asset Replacement","text":""},{"location":"guide/asset-manager/#local-file-replacement","title":"Local File Replacement","text":"<p>Replace assets with files from your computer:</p> <ol> <li>Click the file icon :material-folder: next to the asset</li> <li>Select a replacement file from your file system</li> <li>Watch the animation update in real-time</li> </ol> <p>Supported Formats</p> <ul> <li>Images: PNG, JPG, JPEG, WebP, SVG, GIF</li> <li>Fonts: TTF, OTF, WOFF, WOFF2</li> </ul>"},{"location":"guide/asset-manager/#url-replacement","title":"URL Replacement","text":"<p>Replace assets with files from the web:</p> <ol> <li>Enter a URL in the URL input field</li> <li>Click \"Apply URL\" :material-link: or press <code>Enter</code></li> <li>The asset loads and updates the animation</li> </ol> <p>CORS Considerations</p> <p>Some URLs may not work due to Cross-Origin Resource Sharing (CORS) restrictions. Use direct file links when possible.</p>"},{"location":"guide/asset-manager/#status-indicators","title":"Status Indicators","text":"Icon Status Description :material-paperclip: Embedded Original asset from Rive file :material-folder: File Replaced Replaced with local file :material-link: URL Replaced Replaced with web URL :material-alert: Error Failed to load replacement"},{"location":"guide/asset-manager/#asset-operations","title":"Asset Operations","text":""},{"location":"guide/asset-manager/#expandcollapse-details","title":"Expand/Collapse Details","text":"<p>Click on any asset header to expand or collapse detailed information:</p> <pre><code>\ud83d\udce6 Asset Name\n\u251c\u2500\u2500 Asset Type: Image\n\u251c\u2500\u2500 Asset ID: 12345\n\u251c\u2500\u2500 CDN UUID: abc-def-ghi\n\u2514\u2500\u2500 File Extension: .png\n</code></pre>"},{"location":"guide/asset-manager/#reset-to-original","title":"Reset to Original","text":"<p>To restore an asset to its original embedded version:</p> <ol> <li>Click the Reset button :material-refresh:</li> <li>The asset reverts to the original embedded version</li> <li>Input fields are cleared automatically</li> </ol> <p>Reset Limitations</p> <p>Currently, reset functionality restores the UI state but may require reloading the Rive file to fully restore the original asset.</p>"},{"location":"guide/asset-manager/#asset-information-modal","title":"Asset Information Modal","text":"<p>Click the Info button :material-information: to view detailed asset information in a popup dialog.</p>"},{"location":"guide/asset-manager/#code-examples","title":"Code Examples","text":""},{"location":"guide/asset-manager/#programmatic-asset-access","title":"Programmatic Asset Access","text":"<p>Access assets via the global Rive instance:</p> <pre><code>// Get the asset map\nconst assetMap = window.riveInstanceGlobal.assetMap;\n\n// Iterate through assets\nassetMap.forEach((asset, name) =&gt; {\n    console.log(`Asset: ${name}`);\n    console.log(`Type: ${asset.isImage ? 'Image' : 'Other'}`);\n    console.log(`Extension: ${asset.fileExtension}`);\n});\n</code></pre>"},{"location":"guide/asset-manager/#asset-replacement-api","title":"Asset Replacement API","text":"<p>Replace assets programmatically:</p> <pre><code>// Replace an image asset\nfunction replaceAsset(assetName, imageUrl) {\n    fetch(imageUrl)\n        .then(response =&gt; response.arrayBuffer())\n        .then(buffer =&gt; {\n            const img = window.rive.decodeImage(new Uint8Array(buffer));\n            const asset = assetMap.get(assetName);\n            if (asset &amp;&amp; asset.setRenderImage) {\n                asset.setRenderImage(img);\n                img.unref();\n            }\n        });\n}\n</code></pre>"},{"location":"guide/asset-manager/#best-practices","title":"Best Practices","text":""},{"location":"guide/asset-manager/#file-formats","title":"File Formats","text":"<p>Optimal Formats</p> <ul> <li>Images: Use WebP for best compression, PNG for transparency</li> <li>Fonts: WOFF2 provides the best compression for web use</li> <li>Compatibility: Stick to widely supported formats</li> </ul>"},{"location":"guide/asset-manager/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>File Size: Smaller assets load faster and improve performance</li> <li>Resolution: Match the resolution to your use case</li> <li>Caching: URLs may be cached by the browser</li> </ul>"},{"location":"guide/asset-manager/#workflow-tips","title":"Workflow Tips","text":"<ol> <li>Test Locally First - Verify assets work with local files before using URLs</li> <li>Keep Originals - Always keep backup copies of original assets</li> <li>Document Changes - Note which assets have been modified for your project</li> </ol>"},{"location":"guide/asset-manager/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/asset-manager/#common-issues","title":"Common Issues","text":"Problem Solution Asset won't load Check file format compatibility URL fails Verify CORS headers and direct link Animation breaks Ensure replacement matches original dimensions Reset doesn't work Reload the Rive file completely"},{"location":"guide/asset-manager/#debug-information","title":"Debug Information","text":"<p>Enable debug logging to troubleshoot asset issues:</p> <pre><code>// Enable asset manager debug logging\nLoggerAPI.setModuleLevel('assetManager', LogLevel.DEBUG);\n</code></pre>"},{"location":"guide/asset-manager/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Shortcut Action <code>Click</code> Expand/collapse asset details <code>Enter</code> Apply URL replacement <code>Escape</code> Cancel current operation <p>Related: Dynamic Controls | Debugging | API Reference </p>"},{"location":"guide/installation/","title":"Installation","text":"<p>Set up Rive Tester for local development on your machine.</p>"},{"location":"guide/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Modern Web Browser with WebGL2 support (Chrome, Firefox, Safari, Edge)</li> <li>Node.js 16+ (for package management)</li> <li>Python 3.8+ (for documentation development)</li> <li>Git (for version control)</li> </ul>"},{"location":"guide/installation/#quick-setup","title":"Quick Setup","text":""},{"location":"guide/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/ivg-design/rive_dev_playground.git\ncd rive_dev_playground\n</code></pre>"},{"location":"guide/installation/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"guide/installation/#3-start-development-server","title":"3. Start Development Server","text":"Using npmUsing http-serverUsing Python <pre><code>npm run dev\n</code></pre> <pre><code>npx http-server . -p 8080\n</code></pre> <pre><code>python -m http.server 8080\n</code></pre>"},{"location":"guide/installation/#4-open-in-browser","title":"4. Open in Browser","text":"<p>Navigate to <code>http://localhost:8080</code> to access Rive Tester.</p>"},{"location":"guide/installation/#documentation-development","title":"Documentation Development","text":"<p>To work on the documentation locally:</p>"},{"location":"guide/installation/#1-install-documentation-dependencies","title":"1. Install Documentation Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"guide/installation/#2-serve-documentation","title":"2. Serve Documentation","text":"<pre><code>mkdocs serve\n</code></pre> <p>The documentation will be available at <code>http://localhost:8001</code>.</p>"},{"location":"guide/installation/#3-build-documentation","title":"3. Build Documentation","text":"<pre><code>mkdocs build\n</code></pre> <p>This creates a <code>site/</code> directory with the built documentation.</p>"},{"location":"guide/installation/#development-environment","title":"Development Environment","text":""},{"location":"guide/installation/#recommended-setup","title":"Recommended Setup","text":"<ul> <li>Code Editor: VS Code with extensions:</li> <li>ES6 modules support</li> <li>Live Server</li> <li>Prettier for code formatting</li> <li>Browser: Chrome with Developer Tools</li> <li>Terminal: Integrated terminal in VS Code</li> </ul>"},{"location":"guide/installation/#project-structure","title":"Project Structure","text":"<pre><code>rive_dev_playground/\n\u251c\u2500\u2500 index.html              # Main application\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 components/         # Core components\n\u2502   \u251c\u2500\u2500 styles/            # Modular CSS\n\u2502   \u2514\u2500\u2500 utils/             # Utility functions\n\u251c\u2500\u2500 docs/                  # MkDocs documentation\n\u251c\u2500\u2500 node_modules/          # Dependencies\n\u251c\u2500\u2500 package.json           # Node.js configuration\n\u251c\u2500\u2500 mkdocs.yml            # Documentation configuration\n\u2514\u2500\u2500 requirements.txt       # Python dependencies\n</code></pre>"},{"location":"guide/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guide/installation/#common-issues","title":"Common Issues","text":"Problem Solution Port already in use Change port number or kill existing process Module not found Run <code>npm install</code> to install dependencies CORS errors Use a proper HTTP server, not file:// protocol WebGL2 not supported Use a modern browser or update graphics drivers"},{"location":"guide/installation/#port-conflicts","title":"Port Conflicts","text":"<p>If port 8080 is already in use:</p> <pre><code># Use a different port\nnpx http-server . -p 3000\n\n# Or find and kill the process using the port\nlsof -ti:8080 | xargs kill -9\n</code></pre>"},{"location":"guide/installation/#browser-compatibility","title":"Browser Compatibility","text":"<p>Rive Tester requires WebGL2 support. Check compatibility:</p> <pre><code>// Test WebGL2 support in browser console\nconst canvas = document.createElement('canvas');\nconst gl = canvas.getContext('webgl2');\nconsole.log('WebGL2 supported:', !!gl);\n</code></pre>"},{"location":"guide/installation/#building-for-production","title":"Building for Production","text":""},{"location":"guide/installation/#1-optimize-assets","title":"1. Optimize Assets","text":"<pre><code># Minify CSS and JavaScript (if build tools are configured)\nnpm run build\n</code></pre>"},{"location":"guide/installation/#2-test-production-build","title":"2. Test Production Build","text":"<pre><code># Serve the built files\nnpx http-server dist/ -p 8080\n</code></pre>"},{"location":"guide/installation/#3-deploy","title":"3. Deploy","text":"<p>The application is a static site and can be deployed to:</p> <ul> <li>GitHub Pages (recommended)</li> <li>Netlify</li> <li>Vercel</li> <li>Any static hosting service</li> </ul>"},{"location":"guide/installation/#environment-variables","title":"Environment Variables","text":"<p>For different deployment environments, you may need to configure:</p> Variable Description Default <code>BASE_URL</code> Base URL for the application <code>/</code> <code>DOCS_URL</code> Documentation URL Auto-detected <code>API_URL</code> API endpoint (if applicable) N/A"},{"location":"guide/installation/#dependencies","title":"Dependencies","text":""},{"location":"guide/installation/#runtime-dependencies","title":"Runtime Dependencies","text":"<ul> <li>@rive-app/webgl2 - Rive runtime</li> <li>jsoneditor - JSON tree viewer</li> <li>golden-layout - Panel system</li> </ul>"},{"location":"guide/installation/#development-dependencies","title":"Development Dependencies","text":"<ul> <li>http-server - Local development server</li> <li>mkdocs-material - Documentation theme</li> </ul>"},{"location":"guide/installation/#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li>prettier - Code formatting</li> <li>eslint - Code linting</li> </ul>"},{"location":"guide/installation/#test_tube-testing","title":":test_tube: Testing","text":""},{"location":"guide/installation/#manual-testing","title":"Manual Testing","text":"<ol> <li>Load a Rive file and verify all panels work</li> <li>Test asset replacement with local files and URLs</li> <li>Verify responsive design on different screen sizes</li> <li>Check browser compatibility across different browsers</li> </ol>"},{"location":"guide/installation/#automated-testing","title":"Automated Testing","text":"<p>Currently, the project uses manual testing. Automated tests can be added using:</p> <ul> <li>Jest for unit tests</li> <li>Cypress for end-to-end tests</li> <li>Playwright for cross-browser testing</li> </ul> <p>Next Steps: Quick Start | First Steps </p>"},{"location":"guide/quick-start/","title":"Quick Start","text":"<p>Get up and running with Rive Tester in just a few minutes!</p>"},{"location":"guide/quick-start/#launch-the-application","title":"Launch the Application","text":"Online VersionLocal Development <p>The easiest way to get started is to use the online version:</p> <p>:octicons-rocket-24: Launch Rive Tester</p> <p>For local development, see the Installation Guide.</p>"},{"location":"guide/quick-start/#load-a-rive-file","title":"Load a Rive File","text":"<ol> <li>Click \"Choose File\" in the Controls panel</li> <li>Select a <code>.riv</code> file from your computer</li> <li>Watch the magic happen - your animation will appear in the Canvas panel</li> </ol> <p>Don't have a Rive file?</p> <p>You can download sample files from the Rive Community or create your own using Rive Editor.</p>"},{"location":"guide/quick-start/#explore-the-interface","title":"Explore the Interface","text":"<p>The Rive Tester interface consists of five main panels:</p>"},{"location":"guide/quick-start/#controls-panel","title":"Controls Panel","text":"<ul> <li>File loading and management</li> <li>Playback controls (play, pause, stop)</li> <li>Display settings (fit mode, alignment, background)</li> </ul>"},{"location":"guide/quick-start/#canvas-panel","title":"Canvas Panel","text":"<ul> <li>Live animation preview</li> <li>Real-time rendering with WebGL2</li> <li>Interactive elements and mouse events</li> </ul>"},{"location":"guide/quick-start/#json-inspector","title":"JSON Inspector","text":"<ul> <li>Complete Rive file structure</li> <li>Interactive tree view with search</li> <li>Multiple view modes (tree, code, text)</li> </ul>"},{"location":"guide/quick-start/#dynamic-controls","title":"Dynamic Controls","text":"<ul> <li>Auto-generated UI for ViewModel properties</li> <li>Real-time property manipulation</li> <li>Support for all property types (boolean, number, enum, etc.)</li> </ul>"},{"location":"guide/quick-start/#asset-manager","title":"Asset Manager","text":"<ul> <li>View embedded assets (images, fonts)</li> <li>Replace assets with local files or URLs</li> <li>Asset metadata and status information</li> </ul>"},{"location":"guide/quick-start/#start-exploring","title":"Start Exploring","text":""},{"location":"guide/quick-start/#basic-operations","title":"Basic Operations","text":"<ul> <li>Play/Pause: Use the play button or press <code>Space</code></li> <li>Reset Animation: Click stop or press <code>R</code></li> <li>Change Properties: Use the Dynamic Controls panel</li> <li>Inspect Data: Browse the JSON Inspector</li> </ul>"},{"location":"guide/quick-start/#advanced-features","title":"Advanced Features","text":"<ul> <li>Replace Assets: Use the Asset Manager to swap images or fonts</li> <li>Debug Console: Access <code>window.riveInstanceGlobal</code> in browser console</li> <li>Layout Customization: Drag and resize panels to your preference</li> </ul>"},{"location":"guide/quick-start/#pro-tips","title":"Pro Tips","text":"<p>Keyboard Shortcuts</p> <ul> <li><code>Space</code> - Play/Pause animation</li> <li><code>R</code> - Reset animation</li> <li><code>F</code> - Toggle fullscreen canvas</li> <li><code>Ctrl/Cmd + O</code> - Open file dialog</li> <li><code>F1</code> - Open documentation</li> </ul> <p>Panel Management</p> <ul> <li>Drag tabs to rearrange panels</li> <li>Resize panels by dragging borders</li> <li>Close panels and restore them via the restore bar</li> <li>Reset layout using the reset button</li> </ul> <p>Browser Compatibility</p> <p>Rive Tester requires a modern browser with WebGL2 support. Chrome, Firefox, Safari, and Edge are all supported.</p>"},{"location":"guide/quick-start/#need-help","title":"Need Help?","text":"<ul> <li> User Guide - Complete interface documentation</li> <li> Debugging Guide - Troubleshooting and debug tools</li> <li> Keyboard Shortcuts - Speed up your workflow</li> <li>:octicons-mark-github-24: GitHub Issues - Report bugs or request features</li> </ul> <p>Next Steps: Interface Overview | Loading Files </p>"},{"location":"guide/user-guide/","title":"User Guide","text":"<p>Complete guide to using the Rive Tester interface</p>"},{"location":"guide/user-guide/#interface-overview","title":"\ud83c\udfaf Interface Overview","text":"<p>Rive Tester features a professional IDE-like interface with dockable panels powered by Golden Layout. The interface is designed for efficient workflow and comprehensive Rive file analysis.</p>"},{"location":"guide/user-guide/#main-panels","title":"Main Panels","text":"Panel Description \ud83c\udf9b\ufe0f Controls Panel File loading, playback controls, and global settings \ud83d\uddbc\ufe0f Canvas Panel Live animation preview with real-time rendering \ud83d\udd0d JSON Inspector Interactive tree view of parsed Rive data \u26a1 Dynamic Controls Auto-generated UI for ViewModel properties \ud83d\udce6 Asset Manager View and replace embedded assets"},{"location":"guide/user-guide/#loading-rive-files","title":"\ud83d\udcc1 Loading Rive Files","text":"<p>Getting started with Rive Tester is simple. Follow these steps to load and analyze your Rive files:</p>"},{"location":"guide/user-guide/#quick-start-process","title":"Quick Start Process","text":"<ol> <li> <p>Choose File: Click the \"Choose File\" button in the Controls panel to select a <code>.riv</code> file from your computer.</p> </li> <li> <p>Automatic Parsing: The file is automatically parsed and analyzed. You'll see the animation appear in the Canvas panel.</p> </li> <li> <p>Explore Data: Use the JSON Inspector to explore the parsed data structure and the Dynamic Controls to interact with properties.</p> </li> </ol>"},{"location":"guide/user-guide/#controls-panel","title":"\ud83c\udf9b\ufe0f Controls Panel","text":"<p>The Controls panel is your main interface for file management and global settings.</p>"},{"location":"guide/user-guide/#file-management","title":"File Management","text":"<ul> <li>File Input: Select local <code>.riv</code> files for analysis</li> <li>File Info: View file size, name, and loading status</li> <li>Clear: Reset the application state</li> </ul>"},{"location":"guide/user-guide/#animation-controls","title":"Animation Controls","text":"<ul> <li>Artboard Selector: Choose from available artboards in the file</li> <li>Timeline Selector: Select timeline animations for playback</li> <li>State Machine Selector: Choose state machines to activate</li> <li>Play/Pause: Control timeline animation playback</li> <li>Pause: Pause timeline animations (\u23f8 button)</li> </ul>"},{"location":"guide/user-guide/#display-settings","title":"Display Settings","text":"<ul> <li>Background Color: Customize canvas background color with color picker</li> <li>Fit Mode: Choose how animations fit in the canvas (Contain, Cover, Fill, Fit Width, Fit Height, Scale Down, None, Layout)</li> <li>Alignment: Set animation alignment (Center, Top Left, Top Center, Top Right, Center Left, Center Right, Bottom Left, Bottom Center, Bottom Right)</li> <li>Layout Scale: Adjust animation scale (0.1 to 5.0)</li> </ul>"},{"location":"guide/user-guide/#canvas-panel","title":"\ud83d\uddbc\ufe0f Canvas Panel","text":"<p>The Canvas panel displays your Rive animation with real-time rendering and interactive controls.</p>"},{"location":"guide/user-guide/#features","title":"Features","text":"<ul> <li>WebGL2 Rendering: High-performance animation playback using <code>@rive-app/webgl2</code></li> <li>Responsive Sizing: Automatically adjusts to panel size</li> <li>Aspect Ratio Preservation: Maintains animation proportions</li> <li>Interactive Elements: Mouse events are passed to the animation</li> </ul>"},{"location":"guide/user-guide/#canvas-behavior","title":"Canvas Behavior","text":"<ul> <li>Auto-resize: Canvas automatically resizes when panel dimensions change</li> <li>Background Control: Background color controlled via Controls panel</li> <li>Mouse Interaction: Hover and click events are passed to the animation</li> </ul>"},{"location":"guide/user-guide/#json-inspector","title":"\ud83d\udd0d JSON Inspector","text":"<p>The JSON Inspector provides a comprehensive view of your Rive file's internal structure using an interactive tree interface.</p>"},{"location":"guide/user-guide/#view-modes","title":"View Modes","text":"<ul> <li>Tree View: Hierarchical display with expand/collapse functionality</li> <li>View Mode: Read-only formatted view</li> <li>Code View: Raw JSON with syntax highlighting</li> <li>Text View: Plain text representation</li> <li>Preview: Formatted preview with type information</li> </ul>"},{"location":"guide/user-guide/#navigation-features","title":"Navigation Features","text":"<ul> <li>Search: Find specific properties or values using built-in search</li> <li>Expand All/Collapse All: Quick navigation controls</li> <li>Node Preview: Object previews show first property values</li> <li>Array Display: Arrays show element count</li> </ul>"},{"location":"guide/user-guide/#dynamic-controls","title":"\u26a1 Dynamic Controls","text":"<p>The Dynamic Controls panel automatically generates UI controls for your Rive animation's interactive properties.</p>"},{"location":"guide/user-guide/#supported-property-types","title":"Supported Property Types","text":"<ul> <li>Boolean: Checkbox controls for true/false values</li> <li>Number: Number input fields for numeric values</li> <li>String: Textarea controls for text content (supports newlines)</li> <li>Color: Color picker controls for ARGB color values</li> <li>Enum: Dropdown menus for enumerated values with smart matching</li> <li>Trigger: Buttons for triggering events</li> </ul>"},{"location":"guide/user-guide/#state-machine-controls","title":"State Machine Controls","text":"<ul> <li>Boolean Inputs: Checkbox controls for boolean state machine inputs</li> <li>Number Inputs: Number input fields for numeric inputs</li> <li>Trigger Inputs: Fire buttons for trigger inputs</li> </ul>"},{"location":"guide/user-guide/#real-time-updates","title":"Real-time Updates","text":"<p>All changes made in the Dynamic Controls panel are immediately reflected in the animation, allowing for real-time experimentation and testing.</p>"},{"location":"guide/user-guide/#asset-manager","title":"\ud83d\udce6 Asset Manager","text":"<p>The Asset Manager allows you to inspect and replace embedded assets in your Rive files.</p>"},{"location":"guide/user-guide/#asset-types-supported","title":"Asset Types Supported","text":"<ul> <li>Images: PNG, JPG, WebP, SVG files</li> <li>Fonts: TTF, OTF, WOFF, WOFF2 files</li> </ul>"},{"location":"guide/user-guide/#asset-information-display","title":"Asset Information Display","text":"<p>Each asset shows detailed metadata including: - Asset name and type - Unique ID and CDN UUID (when available) - File extension and format - Current status (embedded, replaced, error)</p>"},{"location":"guide/user-guide/#replacement-options","title":"Replacement Options","text":"<ul> <li>Local Files: Upload replacement assets from your computer using file picker</li> <li>URLs: Replace with assets from web URLs by entering URL and clicking Apply</li> <li>Reset: Restore original embedded assets (planned feature)</li> </ul>"},{"location":"guide/user-guide/#asset-management-features","title":"Asset Management Features","text":"<ul> <li>Click to Expand: Click asset headers to expand/collapse details</li> <li>Status Indicators: Visual indicators show asset status</li> <li>Error Handling: Clear error messages for failed replacements</li> <li>Scrollable Interface: Asset list scrolls when many assets are present</li> </ul>"},{"location":"guide/user-guide/#layout-management","title":"\ud83d\udd27 Layout Management","text":"<p>Rive Tester uses Golden Layout for professional panel management with full customization capabilities.</p>"},{"location":"guide/user-guide/#panel-operations","title":"Panel Operations","text":"<ul> <li>Drag &amp; Drop: Rearrange panels by dragging tabs</li> <li>Resize: Adjust panel sizes by dragging borders</li> <li>Stack: Create tabbed panel groups by dropping panels on each other</li> <li>Split: Create new rows and columns by dropping panels on edges</li> <li>Close: Close panels using the X button (restore via restore bar)</li> </ul>"},{"location":"guide/user-guide/#restore-bar","title":"Restore Bar","text":"<p>When panels are closed, a restore bar appears at the top with options to: - Restore Panels: Click buttons to restore closed panels - View Documentation: Access this documentation site - Reset Layout: Return to default panel arrangement</p>"},{"location":"guide/user-guide/#layout-persistence","title":"Layout Persistence","text":"<p>Your panel arrangement is automatically saved to localStorage and restored when you reload the application.</p>"},{"location":"guide/user-guide/#debugging-features","title":"\ud83d\udc1b Debugging Features","text":"<p>Rive Tester includes comprehensive debugging tools for developers and advanced users.</p>"},{"location":"guide/user-guide/#global-access","title":"Global Access","text":"<p>Access the Rive instance globally for console debugging:</p> <pre><code>// Access the current Rive instance\nconst rive = window.riveInstanceGlobal;\n\n// Inspect artboards\nconsole.log(rive.artboardNames);\n\n// Access ViewModels\nconst vm = rive.viewModelInstance;\nconsole.log(vm.properties);\n</code></pre>"},{"location":"guide/user-guide/#debug-logging","title":"Debug Logging","text":"<p>Modular logging system with configurable levels:</p> <pre><code>// Configure logging levels per module\nwindow.debugConfig = {\n  parser: 'debug',\n  controls: 'info',\n  layout: 'warn',\n  rive: 'debug',\n  ui: 'info'\n};\nwindow.applyDebugConfig();\n</code></pre>"},{"location":"guide/user-guide/#available-debug-modules","title":"Available Debug Modules","text":"<ul> <li><code>parser</code>: Rive file parsing and data extraction</li> <li><code>controls</code>: Dynamic control generation and updates</li> <li><code>layout</code>: Golden Layout system management</li> <li><code>rive</code>: Rive runtime interactions and events</li> <li><code>ui</code>: User interface updates and interactions</li> </ul> <p>Related: Debugging | Runtime Controls | Asset Manager </p>"}]}