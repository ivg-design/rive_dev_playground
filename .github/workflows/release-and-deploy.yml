name: Release and Deploy
on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  check-version-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_version: ${{ steps.check.outputs.should_version }}
      version_type: ${{ steps.check.outputs.version_type }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for version trigger
        id: check
        run: |
          # Check if this is a manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_version=true" >> $GITHUB_OUTPUT
            echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "Manual workflow dispatch detected with version type: ${{ github.event.inputs.version_type }}"
            exit 0
          fi
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          # Check for version keywords in commit message
          if echo "$COMMIT_MSG" | grep -qE "\[major\]|\[MAJOR\]|--major"; then
            echo "should_version=true" >> $GITHUB_OUTPUT
            echo "version_type=major" >> $GITHUB_OUTPUT
            echo "Major version bump detected"
          elif echo "$COMMIT_MSG" | grep -qE "\[minor\]|\[MINOR\]|--minor"; then
            echo "should_version=true" >> $GITHUB_OUTPUT
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Minor version bump detected"
          elif echo "$COMMIT_MSG" | grep -qE "\[patch\]|\[PATCH\]|\[fix\]|\[FIX\]|--patch|--fix"; then
            echo "should_version=true" >> $GITHUB_OUTPUT
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Patch version bump detected"
          else
            echo "should_version=false" >> $GITHUB_OUTPUT
            echo "No version bump keywords found in commit message"
          fi
  semantic-release:
    needs: check-version-trigger
    if: needs.check-version-trigger.outputs.should_version == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          # Bump version based on type
          VERSION_TYPE="${{ needs.check-version-trigger.outputs.version_type }}"
          echo "Version bump type: $VERSION_TYPE"
          # Use npm version to bump
          NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}  # Remove 'v' prefix if present
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
      - name: Generate changelog
        run: |
          # Create or update CHANGELOG.md
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          DATE=$(date +"%Y-%m-%d")
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD)
          fi
          # Create changelog entry
          cat > temp_changelog_entry.md << EOF
          ## [${NEW_VERSION}] - ${DATE}
          ### Changes
          ${COMMITS}
          EOF
          # Prepend to existing changelog or create new one
          if [ -f "CHANGELOG.md" ]; then
            cat temp_changelog_entry.md CHANGELOG.md > temp_changelog.md
            mv temp_changelog.md CHANGELOG.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat temp_changelog_entry.md >> CHANGELOG.md
          fi
          rm temp_changelog_entry.md
          echo "Generated changelog for version $NEW_VERSION"
      - name: Update version display in app
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          # Create version.js file
          mkdir -p src
          cat > src/version.js << EOF
          /**
           * Application version information
           * Auto-generated by semantic release workflow
           */
          export const VERSION = '$NEW_VERSION';
          export const BUILD_DATE = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';
          export const BUILD_COMMIT = '${{ github.sha }}';
          // Display version in console
          console.log(\`🎮 Rive Playground v\${VERSION} - Built \${BUILD_DATE}\`);
          EOF
          # Add version display to index.html if not already present
          if ! grep -q "version-info" index.html; then
            # Add version info to the status bar
            sed -i 's/<p class="log-message" id="statusMessage">/<div class="version-info">v'$NEW_VERSION'<\/div><p class="log-message" id="statusMessage">/' index.html
          else
            # Update existing version
            sed -i 's/<div class="version-info">v[^<]*<\/div>/<div class="version-info">v'$NEW_VERSION'<\/div>/' index.html
          fi
      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]" || exit 0
          git push origin ${{ github.ref_name }}
      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "v$NEW_VERSION"
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## 🎮 Rive Playground v${{ steps.version.outputs.new_version }}
            ### What's Changed
            See [CHANGELOG.md](./CHANGELOG.md) for detailed changes.
            ### 🚀 Try it now
            - **Live Demo**: https://ivg-design.github.io/rive_dev_playground/rive-playground/
            - **Documentation**: https://ivg-design.github.io/rive_dev_playground/source_docs/
            ### 📦 Installation
            ```bash
            git clone https://github.com/ivg-design/rive_dev_playground.git
            cd rive_dev_playground
            npm install
            npm run dev
            ```
            ---
            **Full Changelog**: https://github.com/ivg-design/rive_dev_playground/compare/v${{ steps.version.outputs.new_version }}...HEAD
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [check-version-trigger, semantic-release]
    if: always() && !failure() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # If version was bumped, we need to pull the latest changes
          ref: ${{ needs.check-version-trigger.outputs.should_version == 'true' && 'main' || github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Setup Python for docs
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install docs dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build documentation
        run: |
          mkdocs build --clean
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Create deployment directory
        run: |
          mkdir -p _site/rive-playground
      - name: Copy Rive Playground files
        run: |
          # Copy main files from new structure
          cp index.html _site/rive-playground/
          cp package.json _site/rive-playground/
          cp README.md _site/rive-playground/
          # Copy source directory with new structure
          mkdir -p _site/rive-playground/src
          cp -r src/components _site/rive-playground/src/
          cp -r src/styles _site/rive-playground/src/
          cp -r src/utils _site/rive-playground/src/
          # Copy built documentation
          cp -r mkdocs_site _site/docs
          # Copy animations directory if it exists
          if [ -d "animations" ]; then
            cp -r animations _site/rive-playground/
          fi
          # Copy any .riv files
          find . -name "*.riv" -maxdepth 1 -exec cp {} _site/rive-playground/ \;
      - name: Update version in deployed files
        run: |
          # Get current version from package.json (this will be the updated version if semantic release ran)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Deploying version: $CURRENT_VERSION"
          # Update version in the deployed index.html
          if grep -q "version-info" _site/rive-playground/index.html; then
            # Update existing version
            sed -i 's/<div class="version-info">v[^<]*<\/div>/<div class="version-info">v'$CURRENT_VERSION'<\/div>/' _site/rive-playground/index.html
            echo "Updated version in index.html to v$CURRENT_VERSION"
          else
            echo "No version-info element found in index.html"
          fi
          # Create or update version.js file
          cat > _site/rive-playground/src/version.js << EOF
          /**
           * Application version information
           * Auto-generated by deployment workflow
           */
          export const VERSION = '$CURRENT_VERSION';
          export const BUILD_DATE = '$(date -u +"%Y-%m-%dT%H:%M:%SZ")';
          export const BUILD_COMMIT = '${{ github.sha }}';
          // Display version in console
          console.log(\`🎮 Rive Playground v\${VERSION} - Built \${BUILD_DATE}\`);
          EOF
          echo "Created version.js with version $CURRENT_VERSION"
      - name: Install Rive dependencies in deployment
        run: |
          cd _site/rive-playground
          npm install --production
      - name: Create index page for root
        run: |
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>IVG Design - Development Tools & Documentation</title>
              <style>
                  * {
                      margin: 0;
                      padding: 0;
                      box-sizing: border-box;
                  }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
                      background: linear-gradient(135deg, #0f0f0f 0%, #1a1a1a 100%);
                      color: #e0e0e0;
                      min-height: 100vh;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                  }
                  .container {
                      max-width: 900px;
                      padding: 2rem;
                      text-align: center;
                  }
                  .header {
                      margin-bottom: 3rem;
                  }
                  .header h1 {
                      font-size: 3rem;
                      font-weight: 700;
                      color: #ffffff;
                      margin-bottom: 1rem;
                      background: linear-gradient(135deg, #6366f1, #8b5cf6);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
                  .header p {
                      font-size: 1.2rem;
                      color: #b0b0b0;
                      max-width: 600px;
                      margin: 0 auto;
                      line-height: 1.6;
                  }
                  .tools-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                      gap: 2rem;
                      margin-bottom: 3rem;
                  }
                  .tool-card {
                      background: rgba(26, 26, 26, 0.8);
                      border: 1px solid #333;
                      border-radius: 12px;
                      padding: 2.5rem;
                      transition: all 0.3s ease;
                      backdrop-filter: blur(10px);
                      position: relative;
                      overflow: hidden;
                  }
                  .tool-card::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      right: 0;
                      height: 3px;
                      background: linear-gradient(90deg, #6366f1, #8b5cf6);
                      opacity: 0;
                      transition: opacity 0.3s ease;
                  }
                  .tool-card:hover {
                      transform: translateY(-8px);
                      border-color: #555;
                      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
                  }
                  .tool-card:hover::before {
                      opacity: 1;
                  }
                  .tool-icon {
                      font-size: 3rem;
                      margin-bottom: 1.5rem;
                      display: block;
                  }
                  .tool-card h2 {
                      color: #ffffff;
                      font-size: 1.5rem;
                      margin-bottom: 1rem;
                      font-weight: 600;
                  }
                  .tool-card p {
                      color: #b0b0b0;
                      margin-bottom: 2rem;
                      line-height: 1.6;
                      font-size: 1rem;
                  }
                  .btn {
                      display: inline-flex;
                      align-items: center;
                      gap: 0.5rem;
                      padding: 1rem 2rem;
                      background: linear-gradient(135deg, #6366f1, #8b5cf6);
                      color: white;
                      text-decoration: none;
                      border-radius: 8px;
                      font-weight: 600;
                      transition: all 0.3s ease;
                      border: none;
                      cursor: pointer;
                  }
                  .btn:hover {
                      transform: translateY(-2px);
                      box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3);
                  }
                  .btn-secondary {
                      background: rgba(255, 255, 255, 0.1);
                      border: 1px solid rgba(255, 255, 255, 0.2);
                  }
                  .btn-secondary:hover {
                      background: rgba(255, 255, 255, 0.15);
                      box-shadow: 0 10px 25px rgba(255, 255, 255, 0.1);
                  }
                  .footer {
                      margin-top: 4rem;
                      padding-top: 2rem;
                      border-top: 1px solid #333;
                      color: #888;
                  }
                  .footer a {
                      color: #6366f1;
                      text-decoration: none;
                      transition: color 0.2s ease;
                  }
                  .footer a:hover {
                      color: #8b5cf6;
                  }
                  @media (max-width: 768px) {
                      .header h1 {
                          font-size: 2rem;
                      }
                      .tools-grid {
                          grid-template-columns: 1fr;
                      }
                      .tool-card {
                          padding: 2rem;
                      }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>IVG Design</h1>
                      <p>Professional development tools and documentation for creative workflows, Adobe extensions, and interactive animations.</p>
                  </div>
                  <div class="tools-grid">
                      <div class="tool-card">
                          <div class="tool-icon">🎮</div>
                          <h2>Rive Playground</h2>
                          <p>Interactive tool for parsing and inspecting Rive animation files. Load .riv files, explore their structure, test animations with dynamic controls, and analyze state machines.</p>
                          <a href="./rive-playground/" class="btn">
                              Launch Playground
                              <span>→</span>
                          </a>
                      </div>
                      <div class="tool-card">
                          <div class="tool-icon">📚</div>
                          <h2>Rive Playground Documentation</h2>
                          <p>Comprehensive documentation for the Rive Playground including user guides, development docs, and API reference. Learn how to use all features and extend the tool.</p>
                          <a href="./source_docs/" class="btn btn-secondary">
                              View Documentation
                              <span>→</span>
                          </a>
                      </div>
                  </div>
                  <div class="footer">
                      <p>Built with ❤️ by IVG Design | <a href="https://github.com/ivg-design">GitHub</a> | <a href="mailto:contact@ivg-design.com">Contact</a></p>
                  </div>
              </div>
          </body>
          </html>
          EOF
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
